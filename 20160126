--------------------------------------------------------------------------------
-- Company: <Name>
--
-- File: lll.vhd
-- File history:
--      <Revision number>: <Date>: <Comments>
--      <Revision number>: <Date>: <Comments>
--      <Revision number>: <Date>: <Comments>
--
-- Description: 
--
-- <Description here>
--
-- Targeted device: <Family::IGLOO2> <Die::M2GL010> <Package::144 TQ>
-- Author: <Name>
--
--------------------------------------------------------------------------------

library IEEE;

use IEEE.std_logic_1164.all;

--use UNISIM.vcomponents.all;

use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity lll is
port (
                clk : in std_logic;
				avid: in std_logic;
                fid : in std_logic;
				scl : out std_logic;
				sda : inout std_logic;
			    intreq: in std_logic;
                alarm: out std_logic;--buzzer
			   data_video : in std_logic_vector(7 downto 0);
			   clk_video : in std_logic;
			  --Video-port----------------------------------------------------------------------------------------
				hsync: in std_logic;
                vsync: in std_logic;
			  --VGA-port----------------------------------------------------------------------------------------
			    h_sync_vga : out std_logic;
				v_sync_vga : out std_logic;
				r_vga : out  STD_LOGIC_vector(2 downto 0);
				g_vga : out  STD_LOGIC_vector(2 downto 0);
				b_vga : out  STD_LOGIC_vector(2 downto 0);
			  --VGA-port----------------------------------------------------------------------------------------
                ledarray_D : out  STD_LOGIC_vector(7 downto 0);
                ledarray_U : out  STD_LOGIC_vector(7 downto 0);
				
                ---
                   led_text : out std_logic;
                ---
                rst_system : in  STD_LOGIC
);
end lll;
architecture architecture_lll of lll is

 --inin i2c
type state_t is(ready,start,commend,ack,addrs,data,stop);
signal state:state_t;
signal count:integer range 0 to 10:=0;
signal sdata:std_logic_vector(7 downto 0);
signal flat:std_logic_vector(2 downto 0);
signal flat_t:std_logic;
signal flat_t2:std_logic;
signal flat_t3:std_logic;
--signal flat_t4:std_logic;
signal set_numble:std_logic_vector(3 downto 0);
signal div:std_logic_vector(19 downto 0);
signal up:std_logic;
signal down:std_logic;
signal div_clk_sda:std_logic;
signal div_clk_scl:std_logic;
signal div_clk:std_logic;
signal i2c_end:std_logic;
 --inin i2c

--inin video start --
signal video_state:std_logic_vector(2 downto 0);
--inin video start --

--SAV EAV
  signal  SAV        :  std_logic_vector(1 downto 0);
  signal  EAV        :  std_logic_vector(1 downto 0);
--  signal  SAV_en     :  std_logic;
  signal  image_1    :  std_logic_vector(1 downto 0);
  signal  image_2    :  std_logic_vector(1 downto 0);
  signal  start_en   :  std_logic;
  signal  vga_state  :  std_logic;
  signal  odd_en     :  std_logic;
  signal  even_en    :  std_logic;
  signal  sel_buf    :  std_logic_vector(1 downto 0);
 --SAV EAV
--video------------------------------------------------------------------------------------------------------
signal EAV_new : std_logic_vector(1 downto 0):="ZZ";
signal SAV_old : std_logic_vector(1 downto 0):="ZZ";
signal EAV_state : std_logic_vector(1 downto 0):="00";
signal SAV_state : std_logic_vector(1 downto 0):="00";
signal SAV_en : std_logic:='0';

signal cnt_video_hsync : integer range 0 to 1715:=0;

signal f_video_en : std_logic:='Z'; --Field
signal cnt_video_en : std_logic:='0';
signal cnt_vga_en : std_logic:='0';
signal buf_vga_en : std_logic:='0';

signal cnt_h_sync_vga : integer range 0 to 857:=0;
signal cnt_v_sync_vga : integer range 0 to 524:=0;
signal black_vga_en : std_logic:='0';
signal sync_vga_en : std_logic:='0';
signal f0_vga_en : std_logic:='0'; --Field 0
--video------------------------------------------------------------------------------------------------------
--VGA-8bit-------------------------------------------------------------------------------------------------------
signal buf_vga_state : std_logic_vector(1 downto 0):="00";


type Array_Y is ARRAY (integer range 0 to 639) of std_logic_vector(7 downto 0);
signal buf_vga_Y : Array_Y;
signal buf_vga_Y_buf : Array_Y;
signal buf_vga_Y_sram : Array_Y;
signal buf_vga_Y_bram : Array_Y;
signal buf_vga_sobel : Array_Y;
signal buf_vga_R, buf_vga_G, buf_vga_B : Array_Y;

signal Cb_register, Cr_register : std_logic_vector(7 downto 0);


signal buf_vga_Y_in_cnt : integer range 0 to 639:=0;
signal buf_vga_Y_out_cnt : integer range 0 to 639:=639;

--signal buf_vga_CbYCr_state : std_logic:='0';
--VGA-8bit-------------------------------------------------------------------------------------------------------
--state-------------------------------------------------------------------------------------------------------
signal range_total_cnt : integer range 0 to 1289:=0;
signal range_total_cnt_en : std_logic:='0';
signal buf_Y_temp_en : std_logic:='0';
signal SB_buf_012_en : std_logic:='0';
signal buf_sobel_cc_en : std_logic:='0';
signal buf_sobel_cc_delay : integer range 0 to 3:=0;
signal SBB_buf_en : std_logic:='0';
signal buf_data_state : std_logic_vector(1 downto 0):="00";
--state-------------------------------------------------------------------------------------------------------



component BRAM
	port (
	CLK: IN std_logic;
	A_DIN: IN std_logic_VECTOR(7 downto 0);
	A_ADDR: IN std_logic_VECTOR(14 downto 0);
	--ena: IN std_logic;
	A_BLK: IN std_logic;
	A_WEN: IN std_logic;
    A_DOUT_EN : IN std_logic;
	A_DOUT: OUT std_logic_VECTOR(7 downto 0);
    B_ADDR: IN std_logic_VECTOR(14 downto 0);
    B_DIN: IN std_logic_VECTOR(7 downto 0);
    B_WEN: IN std_logic;
    B_DOUT: OUT std_logic_VECTOR(7 downto 0);
    B_BLK: IN std_logic;
    B_DOUT_EN : IN std_logic

);
end component;
signal dina : std_logic_VECTOR(7 downto 0):="00000000";
signal douta : std_logic_VECTOR(7 downto 0):="00000000";
signal doutb : std_logic_VECTOR(7 downto 0):="00000000";
signal wea : std_logic:='0';
--signal DOUT_ena : std_logic:='1';
signal ena : std_logic:='1';
signal addra : std_logic_VECTOR(14 downto 0):="000000000000000";

------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------
--			 ____					____			 --
--		  /		\			 / 	  \       --
--     |			 |			|			|		 --
--		|			  |	  |			 |	 	 --
--		 |      \ |       |		 \	|		 --
--		  \ ____ \			 \ ____ \		 --
--              \		            \		 --
------------------------------------------
-- QQ = ??????
--
--


-- DCM--clk--
signal dcm_clk1:std_logic;  
signal dcm_clk2:std_logic;  
signal dcm_clk3:std_logic;  
signal dcm_clk4:std_logic;  
signal dcm_clk5:std_logic;  


signal dcm_psen0:std_logic:='0' ;  
-- CLK0
 signal CLK0:std_logic;  
-- DCM--clk--



--inin Integral Image --
type    arr_Integral_Image  is array (integer range 0 to 640) of std_logic_vector(7 downto 0);
--type    arr_Integral_Image_t   is array (integer range 0 to 480) of arr_Integral_Image ;
signal  diff_int_new    :  arr_Integral_Image;
signal  diff_int_old    :  arr_Integral_Image;
signal  diff_int_zero    :  arr_Integral_Image;

--inin Integral Image --

----fpga_to_arduino
--	type  arduino_state is (s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24);
--	signal status : arduino_state:=s0;
--	signal click_left_tmp,click_right_tmp,click_left_tmp2,click_right_tmp2 : std_logic;
--	signal x_axis_tmp : std_logic_vector(10 downto 0);
--	signal y_axis_tmp : std_logic_vector(10 downto 0);
----fpga_to_arduino



--inin sram --

		signal sram_addr_cnt:std_logic_vector(16 downto 0);
		signal sram_data_inout_t:std_logic_vector(7 downto 0);
		signal sram_ce_1_t:std_logic;  
		signal sram_ce_2_t:std_logic;  
		signal sram_ce_3_t:std_logic;  
		signal sram_ce_4_t:std_logic;  
		signal choice_ce :std_logic_vector(1 downto 0);
		signal sram_oe_t:std_logic;  
		signal sram_we_t:std_logic;  
		
		signal sram_data_new:std_logic_vector(7 downto 0);
		signal sram_data_old:std_logic_vector(7 downto 0);
		
--
		
			signal sram_data_low:std_logic_vector(7 downto 0);
				signal sram_data_high:std_logic_vector(7 downto 0);
				signal sram_data:std_logic_vector(15 downto 0);
				signal sram_data_t:std_logic_vector(15 downto 0);
				signal ppp:std_logic;
--				signal gogo_ram:std_logic;  

				signal diff_video:std_logic_vector(7 downto 0);
				signal diff:std_logic;  
			
				signal video_threshold:std_logic_vector(7 downto 0);
				signal threshold:std_logic_vector(7 downto 0);
				
--				video_threshold


--inin sram --
--
--color--
--signal YCR : integer range 0 to 1023;
signal YCR : std_logic_vector(19 downto 0);
signal YCG : std_logic_vector(19 downto 0);
signal YCB : std_logic_vector(19 downto 0);
signal YCR_C1 : std_logic_vector(11 downto 0);
signal YCG_C1 : std_logic_vector(11 downto 0);
signal YCG_C2 : std_logic_vector(11 downto 0);
signal YCB_C1 : std_logic_vector(11 downto 0);
--color--


--VGA SOBEL BUFFER
  type    arr_y   is array (integer range 0 to 679) of std_logic_vector(7 downto 0);
  signal  vga_y      :  arr_y;
  signal  vga_y_1    :  arr_y;
  signal  vga_y_2    :  arr_y;
  signal  vga_y_3    :  arr_y;
  signal  sobel_x    :  std_logic_vector(10 downto 0);
  signal  sobel_y    :  std_logic_vector(10 downto 0);
  signal  sobel_xy   :  std_logic_vector(10 downto 0);
  signal  SB_0_buf0  :  std_logic_vector(10 downto 0);
  signal  SB_0_buf1  :  std_logic_vector(10 downto 0);
  signal  SB_0_buf2  :  std_logic_vector(10 downto 0);
  signal  SB_1_buf0  :  std_logic_vector(10 downto 0);
  signal  SB_1_buf1  :  std_logic_vector(10 downto 0);
  signal  SB_1_buf2  :  std_logic_vector(10 downto 0);
  signal  SB_2_buf0  :  std_logic_vector(10 downto 0);
  signal  SB_2_buf1  :  std_logic_vector(10 downto 0);
  signal  SB_2_buf2  :  std_logic_vector(10 downto 0);
  signal  vga_cnt    :  integer range 0 to 679;
  signal  vga_cnt1    :  integer range 0 to 679;
  signal  video_hsync:  integer range 0 to 1715;
  
   type    sobel_t   is array (integer range 0 to 679) of std_logic;
	signal  sobel_old_x    :  sobel_t;
	signal  sobel_old_y    :  sobel_t;
	
	signal  sobel_diff_x    :  std_logic;
	signal  sobel_diff_y    :  std_logic;
	
	
	signal  safe_en :  std_logic;
	signal  sobel_diff :  std_logic;
	
  
--VGA SOBEL BUFFER



---------------------|
--Erosion  Buffer--|
---------------------|
type Array_Erosion_buf is array (integer range 0 to 639) of std_logic_vector ((8-1) downto 0);
signal Erosion_buf_0 : Array_Erosion_buf;
signal Erosion_buf_0_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_0_data_9 : std_logic_vector((10-1) downto 0):="0000000000";

signal Erosion_buf_1 : Array_Erosion_buf;
signal Erosion_buf_1_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_1_data_9 : std_logic_vector((10-1) downto 0):="0000000000";

signal Erosion_buf_2 : Array_Erosion_buf;
signal Erosion_buf_2_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_2_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Erosion_buf_3 : Array_Erosion_buf;
signal Erosion_buf_3_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_3_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Erosion_buf_4 : Array_Erosion_buf;
signal Erosion_buf_4_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_4_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Erosion_buf_5 : Array_Erosion_buf;
signal Erosion_buf_5_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_5_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Erosion_buf_6 : Array_Erosion_buf;
signal Erosion_buf_6_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_6_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Erosion_buf_7 : Array_Erosion_buf;
signal Erosion_buf_7_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_7_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Erosion_buf_8 : Array_Erosion_buf;
signal Erosion_buf_8_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_buf_8_data_9 : std_logic_vector((10-1) downto 0):="0000000000";



signal Erosion_buf_in_data : std_logic_vector((8-1) downto 0):="00000000";
signal Erosion_buf_cnt : integer range 0 to 639:=0;
signal Erosion_buf_cnt_max : integer range 0 to 639:=639; --0~639

signal Erosion_XSCR : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_YSCR : std_logic_vector((10-1) downto 0):="0000000000";
signal Erosion_CRB_data : std_logic:='0';
----------|
--Erosion End--|
----------|
---------------------|
--Dilation  Buffer--|
---------------------|
type Array_Dilation_buf is array (integer range 0 to 639) of std_logic_vector ((8-1) downto 0);
signal Dilation_buf_0 : Array_Dilation_buf;
signal Dilation_buf_0_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_0_data_9 : std_logic_vector((10-1) downto 0):="0000000000";

signal Dilation_buf_1 : Array_Dilation_buf;
signal Dilation_buf_1_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_1_data_9 : std_logic_vector((10-1) downto 0):="0000000000";

signal Dilation_buf_2 : Array_Dilation_buf;
signal Dilation_buf_2_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_2_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Dilation_buf_3 : Array_Dilation_buf;
signal Dilation_buf_3_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_3_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Dilation_buf_4 : Array_Dilation_buf;
signal Dilation_buf_4_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_4_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Dilation_buf_5 : Array_Dilation_buf;
signal Dilation_buf_5_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_5_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Dilation_buf_6 : Array_Dilation_buf;
signal Dilation_buf_6_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_6_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Dilation_buf_7 : Array_Dilation_buf;
signal Dilation_buf_7_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_7_data_9 : std_logic_vector((10-1) downto 0):="0000000000";


signal Dilation_buf_8 : Array_Dilation_buf;
signal Dilation_buf_8_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_3 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_4 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_5 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_6 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_7 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_8 : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_buf_8_data_9 : std_logic_vector((10-1) downto 0):="0000000000";

signal Dilation_buf_in_data : std_logic_vector((8-1) downto 0):="00000000";
signal Dilation_buf_cnt : integer range 0 to 639:=0;
signal Dilation_buf_cnt_max : integer range 0 to 639:=639; --0~639

signal Dilation_XSCR : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_YSCR : std_logic_vector((10-1) downto 0):="0000000000";
signal Dilation_CRB_data : std_logic:='0';
----------|
--Dilation End--|
----------|

--SOBEL
  signal  SB_en     :  std_logic;
  signal  SB_cnt    :  integer range 0 to 679;
  signal  SB_xy_en  :  std_logic;
  signal  SB_th     :  std_logic;
  signal  odd_state :  std_logic;
  signal  even_state:  std_logic;
  signal  sampx_5   :  integer range 0 to 5;
  
  
--  signal  sampy_5   :  integer range 0 to 10;
--SOBEL


--Motion point average system by Chueh-Han Lo 20121226---------------------------------------------------------------------------------------------------------
-- MPAS = Motion point average system : ?????????(???)???
signal MPAS_SS  : integer range 0 to 10 :=0; -- SS = system state : ?????
signal MPAS_AS  : integer range 0 to 10 :=0; -- AS = average state : ?????????????????????????????
signal MPAS_cnt  : integer range 0 to 8192 :=0; -- cnt = counter : ?????????????? 8192 ?
signal MPAS_XC : integer range 0 to 5242880 :=0; -- XC = horizontal counter : ??????????X?????8192*640=5242880
signal MPAS_YC : integer range 0 to 3932160 :=0; -- YC = vertical counter : ???????????????8192*480=3932160
signal MPAS_SB2I : integer range 0 to 13:=0; --SB2C = Select(n) Bit to Integer ,  XCT/2^n and YCT/2^n : ???????????????
signal MPAS_XC_SB2I : integer range 0 to 5242880 :=0; -- ???????????????????
signal MPAS_YC_SB2I : integer range 0 to 3932160 :=0; -- ???????????????????
signal MPAS_XCB : std_logic_vector(22 downto 0); -- B = 2bit : ? MPAS_XC_SB2I ????????? 5242880 = "10100000000000000000000" 
signal MPAS_YCB : std_logic_vector(21 downto 0); -- B = 2bit : ? MPAS_YC_SB2I ??2?????? 3932160 = "1111000000000000000000"
signal MPAS_XCC : integer range 0 to 640 :=0; -- XCC = horizontal count center : ?????????
signal MPAS_YCC : integer range 0 to 480 :=0; -- YCC = vertical count center : ?????????
signal MPAS_XCCT, MPAS_XCCT2, MPAS_XCCT3, MPAS_XCCT4, MPAS_XCCT5, MPAS_XCCT6, MPAS_XCCT7 : integer range 0 to 640 :=0; -- T = temp : ????????? ???
signal MPAS_YCCT, MPAS_YCCT2, MPAS_YCCT3, MPAS_YCCT4, MPAS_YCCT5, MPAS_YCCT6, MPAS_YCCT7 : integer range 0 to 480 :=0; -- T = temp : ?????y???? ???
signal MPAS_XCC_is1 : integer range 0 to 640 :=0; -- is1 : ??@?i??????
signal MPAS_YCC_is1 : integer range 0 to 480 :=0; -- is1 : ?????????

--signal MPAS_XCC_D  : integer range 0 to 2 :=0; -- D = direction : ??????2 = ???1 = ???0 = ???
--signal MPAS_YCC_D  : integer range 0 to 2 :=0; -- D = direction : ??????2 = ???1 = ???0 = ???
signal MPAS_XCC_D  : std_logic:='0'; -- D = direction : ??????0 = ???1 = ???
signal MPAS_YCC_D  : std_logic:='0'; -- D = direction : ??????0 = ???1 = ???

signal MPAS_fin_en  : std_logic:='0'; -- fin = finish?en = enable : ??????
signal MPAS_cnt_TF  : std_logic:='0'; -- TF = true or false : ?????????????P?
signal MPAS_C_TF  : std_logic:='0'; -- = C = center : ????IO???Xw????
signal MPAS_DD_cnt  : integer range 0 to 27000000 :=0; -- DD = debug delay : debug ??????1? = 27000000?
signal MPAS_R, MPAS_L : integer range 0 to 640 :=0; -- R = right : ????????L = left : ????????
signal MPAS_D, MPAS_U : integer range 0 to 480 :=0; -- D = down : ????????U = up : ????????
signal MPAS_XCC_dou : integer range 0 to 2560 :=0; -- dou = double : MPAS_XCC_dou = MPAS_XCC + MPAS_XCC_is1??????????????????????
signal MPAS_YCC_dou : integer range 0 to 1920 :=0; -- dou = double : MPAS_YCC_dou = MPAS_YCC + MPAS_YCC_is1?C????IPe@i??????


signal MPAS_XCC_douB : std_logic_vector(12 downto 0); -- ? MPAS_XCC_dou ??2??
signal MPAS_YCC_douB : std_logic_vector(11 downto 0); -- ? MPAS_YCC_dou ??2??

signal MPAS_XCC_mouse : std_logic_vector(10 downto 0); -- ? MPAS_XCC_dou ??2??
signal MPAS_YCC_mouse : std_logic_vector(10 downto 0); -- ? MPAS_YCC_dou ??2??


signal MPAS_XCC_SP : integer range 0 to 200 :=0; -- sp = speed : ?????????????????????????????????
signal MPAS_YCC_SP : integer range 0 to 200 :=0; -- sp = speed : ?????????????????????????????????
signal MPAS_trace_XC : integer range 0 to 640;
signal MPAS_trace_YC : integer range 0 to 480;
signal MPAS_L_pole_temp : integer range 0 to 640;
signal MPAS_Ly_pole_temp : integer range 0 to 480;
signal MPAS_R_pole_temp : integer range 0 to 640;
signal MPAS_Ry_pole_temp : integer range 0 to 480;
signal MPAS_U_pole_temp : integer range 0 to 480;
signal MPAS_Ux_pole_temp : integer range 0 to 640;
signal MPAS_D_pole_temp : integer range 0 to 480;

signal MPAS_L_pole : integer range 0 to 640;
signal MPAS_Ly_pole : integer range 0 to 480;
signal MPAS_R_pole : integer range 0 to 640;
signal MPAS_Ry_pole : integer range 0 to 480;
signal MPAS_U_pole : integer range 0 to 480;
signal MPAS_Ux_pole : integer range 0 to 640;
signal MPAS_D_pole : integer range 0 to 480;

signal MPAS_L_pole_old : integer range 0 to 640;
signal MPAS_Ly_pole_old : integer range 0 to 480;

signal MPAS_R_pole_old : integer range 0 to 640;
signal MPAS_Ry_pole_old : integer range 0 to 480;

signal MPAS_U_pole_old : integer range 0 to 480;
signal MPAS_Ux_pole_old : integer range 0 to 640;



signal MPAS_diff_Lx : integer range 0 to 640;   --L and U
signal MPAS_diff_Ly : integer range 0 to 480;

signal MPAS_diff_Lx_old : integer range 0 to 640;
signal MPAS_diff_Ly_old : integer range 0 to 480;

signal MPAS_diff_Rx : integer range 0 to 640;	--R and U
signal MPAS_diff_Ry : integer range 0 to 480;

signal MPAS_diff_Rx_old : integer range 0 to 640;
signal MPAS_diff_Ry_old : integer range 0 to 480;

signal MPAS_diff_U : integer range 0 to 480;




signal MP_inbox1_TF : std_logic; --Motion Point judge the Motion Point weather in box1
signal MP_inbox2_TF : std_logic; --Motion Point judge the Motion Point weather in box2
signal MP_inbox3_TF : std_logic; --Motion Point judge the Motion Point weather in box3
signal MP_inbox4_TF : std_logic; --Motion Point judge the Motion Point weather in box4
signal MP_inbox5_TF : std_logic; --Motion Point judge the Motion Point weather in box5
-- MPAS = Motion point average system : ?????????(???)???




--
--
--
------------------------------------------
--			 ____					____			 --
--		  /		\			 / 	  \       --
--     |			 |			|			|		 --
--		|			  |	  |			 |	 	 --
--		 |      \ |       |		 \	|		 --
--		  \ ____ \			 \ ____ \		 --
--              \		            \		 --
------------------------------------------

----QQ_USB--------------------------------------------------------------------------------------------------------
--type USB_mouse_func is array (integer range 0 to 10) of EIGHT_BYTES ;
--signal USB_mouse_Ar : USB_mouse_func;
--signal USB_mouse_cnt : integer range 0 to 10 := 0;
--
--type AR is array (integer range 0 to 10) of EIGHT_BYTES;
--signal Ar_AA :AR;
--signal Ar_cnt : integer range 0 to 10:=1;
--signal cnt :integer range 0 to 1:=0;
--signal MD_usb_mouse_movx : std_logic_vector(7 downto 0);
--signal MD_usb_mouse_movy : std_logic_vector(7 downto 0);
--signal MD_usb_mouse_mov : integer range -640 to 640:=0;
--signal MD_usb_mouse_mov2 : integer range -480 to 480:=0;
----signal MD_Mouse_XC_is1 : integer range 0 to 640;
----signal MD_Mouse_YC_is1 : integer range 0 to 480;
--signal usb_div : integer range 0 to 2:=0;
--signal usb_cnt : integer range 0 to 1000000:=0;
--signal usb_cnt2 : integer range 0 to 1000000:=0;
--signal usb_reset : std_logic:='0';
--signal usb_reset2 : std_logic:='0';
--signal usb_reset_en : std_logic:='0';
----QQ_USB--------------------------------------------------------------------------------------------------------



------------------------------|
--SSC = System State Control--|
------------------------------|
signal SSC_state : integer range 0 to 20:=0;
-------------|
--SSC = End--|
-------------|

--------------------------|
----FD = First Detection--|
--------------------------|
--signal MT_to_FD_en : std_logic:='1';
--signal MT_FD_en_end : std_logic:='0';
signal MT_YS_data : std_logic_vector(7 downto 0):="00000000";
--

---------------------|
--SB = Sobel Buffer--|
---------------------|
type Array_Sobel_buf is array (integer range 0 to 639) of std_logic_vector ((8-1) downto 0);
signal SB_buf_0 : Array_Sobel_buf;
signal SB_buf_0_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_buf_0_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_buf_0_data_3 : std_logic_vector((10-1) downto 0):="0000000000";

signal SB_buf_1 : Array_Sobel_buf;
signal SB_buf_1_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_buf_1_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_buf_1_data_3 : std_logic_vector((10-1) downto 0):="0000000000";

signal SB_buf_2 : Array_Sobel_buf;
signal SB_buf_2_data_1 : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_buf_2_data_2 : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_buf_2_data_3 : std_logic_vector((10-1) downto 0):="0000000000";

signal SB_buf_in_data : std_logic_vector((8-1) downto 0):="00000000";
signal SB_buf_cnt : integer range 0 to 639:=0;
signal SB_buf_cnt_max : integer range 0 to 639:=639; --0~639

signal SB_XSCR : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_YSCR : std_logic_vector((10-1) downto 0):="0000000000";
signal SB_CRB_data : std_logic:='0';
----------|
--SB End--|
----------|

--type Array_mouse_buf is ARRAY (integer range 0 to 639) of std_logic_vector(479 downto 0);
--signal mouse_buf_is0, mouse_buf_is1 : Array_mouse_buf;

----------------------|
--YAB = Y AVG Buffer--|
----------------------|
type Array_YAB_buf is ARRAY (integer range 0 to 639) of std_logic_vector(7 downto 0);
signal YAB_buf_1 : Array_YAB_buf;
signal YAB_buf_1_in_cnt : integer range 0 to 639:=0;
signal YAB_buf_1_out_cnt : integer range 0 to 639:=0;
signal YAB_buf_1_data : std_logic_vector(7 downto 0):="00000000";

signal YAB_buf_2 : Array_YAB_buf;
signal YAB_buf_2_in_cnt : integer range 0 to 639:=0;
signal YAB_buf_2_out_cnt : integer range 0 to 639:=0;
signal YAB_buf_2_data : std_logic_vector(7 downto 0):="00000000";

signal YAB_XA_cnt : integer range 1 to 4:=1;
signal YAB_YA_cnt : integer range 1 to 4:=1;

signal YAB_X_data_1 : std_logic_vector(7 downto 0):="00000000";
signal YAB_X_data_2 : std_logic_vector(7 downto 0):="00000000";
signal YAB_X_data_3 : std_logic_vector(7 downto 0):="00000000";
signal YAB_X_data_4 : std_logic_vector(7 downto 0):="00000000";
signal YAB_buf_en : std_logic:='0';
signal YAB_buf_cnt_max : integer range 0 to 639:=639;
-----------|
--YAB End--|
-----------|

-----------------------------|
--SBB = Sobel Binary Buffer--|
-----------------------------|
signal SBB_buf_out_data : std_logic_vector((8-1) downto 0):="00000000";
signal SBB_buf_cnt : integer range 0 to 38400-1:=0;
signal SBB_buf_cnt_max : integer range 0 to 38400-1:=38400-1;
signal SBB_data_delay_1 : std_logic_vector((8-1) downto 0):="00000000";
signal SBB_data_delay_2 : std_logic_vector((8-1) downto 0):="00000000";
signal SBB_data_delay_3 : std_logic_vector((8-1) downto 0):="00000000";
signal SBB_data_delay_4 : std_logic_vector((8-1) downto 0):="00000000";
signal SBB_data_delay_5 : std_logic_vector((8-1) downto 0):="00000000";
-----------|
--SBB End--|
-----------|




---------------------------------|
--CRB = Calculate Result Buffer--|
---------------------------------|
type Array_CRB_buf is ARRAY (integer range 0 to 639) of std_logic;

signal CRB_buf_in_cnt : integer range 0 to 639:=639;
signal CRB_buf_out_cnt : integer range 0 to 639:=0;

signal CRB_Cb_en : std_logic:='0';
signal CRB_Cr_en : std_logic:='0';

signal CRB_MDF_buf : Array_CRB_buf;
signal CRB_MDF_buf_data : std_logic:='0';

signal CRB_Sobel_buf : Array_CRB_buf;
signal CRB_diff_buf : Array_CRB_buf;

signal CRB_Sobel_buf_data : std_logic:='0';
signal CRB_diff_buf_data : std_logic:='0';


signal CRB_Erosion_buf : Array_CRB_buf;
signal CRB_Erosion_buf_data : std_logic:='0';

signal CRB_Dilation_buf : Array_CRB_buf;
signal CRB_Dilation_buf_data : std_logic:='0';

signal CRB_SF_buf : Array_CRB_buf;
signal CRB_SF_buf_data : std_logic:='0';

signal CRB_buf_cnt_max : integer range 0 to 639:=639;

type Array_YYY_buf is ARRAY (integer range 0 to 639) of std_logic_vector(7 downto 0);
signal CRB_YYY_buf : Array_YYY_buf;
-----------|
--CRB End--|
-----------|



signal box_size : integer range 0 to 100;





component fpga_to_arduino
	Port ( 
			clk : in std_logic;
			clk_in : in std_logic;
			rst : in std_logic;
			data_out : out std_logic;
			x_axis : in std_logic_vector(10 downto 0);
			y_axis : in std_logic_vector(10 downto 0);
			click_left : in std_logic;
			click_right : in std_logic);

end component;

signal x_axis	 :std_logic_vector(10 downto 0);
signal y_axis	 :std_logic_vector(10 downto 0);
signal click_left :std_logic:='0';
signal click_right :std_logic:='0';


begin



--BRAM-------------------------------------------------------------------------------------------------------
Background : BRAM
		port map (

                A_DIN => dina,
                B_DIN => dina,
                A_ADDR => addra,
                B_ADDR => addra,                
                A_BLK => '1',
                B_BLK => '1',
                A_WEN => wea ,     
                B_WEN => wea ,    
                
                A_DOUT_EN => '1',
                B_DOUT_EN => '1',
                
                A_DOUT => douta,
                B_DOUT => doutb,
                CLK => clk_video
                
			);
--BRAM-------------------------------------------------------------------------------------------------




alarm <= '0'; --buzzer
led_text <= v_sync_vga ;
-----------inin i2c------------------

div_clk <= div(10);
scl <= div_clk_scl;
divclk : process(clk_video, rst_system)
begin
	if rst_system = '0' then
		div <= (others=>'0');
        
	elsif rising_edge(clk_video) then
		div <= div + '1';
        if div=x"FFFFF" then 
			div<=x"00000";
		end if ;
         
	end if;
	
end process;

Master_scl : process(rst_system,clk_video)
begin 
	if rst_system = '0' then
		flat_t <= '0';
		up <= '0';
		down <= '0';
		div_clk_sda <= '1';
		div_clk_scl <= '1';
	elsif rising_edge(clk_video) then
		if div_clk = '1' then 
			if flat_t = '1' then 
				flat_t <= '0';
					if up = '0' then 		
						if i2c_end = '1' then  --finish i2c
										 div_clk_scl <= '1';
                     else
										 div_clk_scl <= '0';
						end if ;
						down <= '1';
					elsif up = '1' then 
						div_clk_scl <= '1';
						down <= '0';
					end if;
			end if ;
		elsif div_clk = '0' then 
			if flat_t = '0' then 
			flat_t <= '1';
					if down = '0' then 
						up <= '0';
						div_clk_sda <= '0';
					elsif down = '1' then 
						up <= '1';
						div_clk_sda <= '1';
					end if;
			end if ;
		end if ;
	 end if ;
end process;

Master_sda : process(rst_system,clk_video)
begin
	if rst_system = '0' then
		sda <= '1';		
		sdata <= "00000000";
		state <= ready;
		flat <= "000";
		flat_t2 <= '0';
		flat_t3 <= '0';
		
		set_numble <= "0000";
		count<= 0;
		i2c_end <= '0' ; 
	elsif rising_edge(clk_video) then
		-----------------********---------------------
		if  div_clk_scl = '1' then
			if flat_t3 = '0' then 
				count <= count + 1;
				flat_t3 <= '1';
			end if ;
		elsif  div_clk_scl = '0' then
			flat_t3 <= '0';
		end if ; 
		---------------*******-------------------------
		case state is 
	
		when ready =>
							if set_numble = "1011" then  --finsh
                     i2c_end <= '1' ; 
							else
								if div_clk_scl = '0' and div_clk_sda = '1' then 
                            state <= start ; 
                        end if ;
                    end if ;
			    
		when start =>
		if  div_clk_sda = '1' and div_clk_scl= '0' then  -- scl = 0
			sda <= '1' ;
		elsif div_clk_sda = '0' and div_clk_scl= '1' then --scl = 1
				sda <= '0';
				flat_t2 <= '0';
				count<=0;
				
				state <= commend; 
			
		end if ;
		when commend =>
		sdata <= "01000010";-----wr   --first  0x42
		if  div_clk_sda = '1' and div_clk_scl = '0' and flat_t2 = '0' then  -- scl = 0  --send data
						flat_t2 <= '1';
						if count <=7 then 
						sda <= sdata(7-count);
						end if ;
		elsif div_clk = '1' then 
			flat_t2 <= '0';
		end if ;
		if count = 8 and div_clk_scl = '0' and div_clk_sda = '1' then 
			
				flat <= "001" ;
			
		state <= ack ;
		
		count <= 0 ;
		end if ;

		when ack =>
		sda <= 'Z';
		--if flat = "110" then
		--SDA <= '0';
		--end if ;
		if div_clk_sda = '0' and div_clk_scl ='0' then 
				if flat = "001" then  --addrs
					flat_t2 <= '0';
					count<=0;
					state <= addrs;
				elsif flat = "010" then  --data
					flat_t2 <= '0';
					count<=0;
					state <= data;
				elsif flat = "011"  then  --stop
					state <= stop;
				end if ;
			end if ;
		
		when addrs =>
        if set_numble = "0000" then 
        sdata<= "00000110";  --set       0x06 (640*480 60hz)        
		elsif set_numble = "0001" then 
        sdata<= "00000101";  --set       0x05
        elsif set_numble = "0010" then 
        sdata<= "00000001";  --set video 0x01  (hs/vs)
        elsif set_numble = "0011" then 
        sdata<= "00000011";  --set output control  0x03
--------------------
        elsif set_numble = "0100" then 
        sdata<= "00111010";  --set ADC control 0x3a        
        elsif set_numble = "0101" then 
       -- sdata<= "00000000";  --set input control 0x00 
        elsif set_numble = "0110" then 
       -- sdata<= "00000000";  --set input control 0x00 
        elsif set_numble = "0111" then 
        sdata<= "11000011";  --set adc0 control 0xc3 
        elsif set_numble = "1000" then 
        sdata<= "11000100";  --set adc1 control 0xc4 
        elsif set_numble = "1001" then 
        sdata<= "11110011";  --set adc set 0xf3
        elsif set_numble = "1010" then 
        sdata<= "11101101";  --set fast Blankin 0xED

        end if ;









		flat <= "010";
		if  div_clk_sda = '1' and div_clk_scl = '0' and flat_t2 = '0' then  -- scl = 0
						flat_t2 <= '1';
						if count <=7 then 
						sda <= sdata(7-count);
						end if ;
			elsif div_clk = '1' then 
				flat_t2 <= '0';
			end if ;
			if count = 8 and div_clk_sda = '1' and div_clk_scl = '0' then 
				state <= ack ;
				count <= 0 ;
			end if ;
		
		when data =>
        if set_numble = "0000" then 
        sdata<= "00001000";  --set       0x08 (640*480 60hz)
        elsif set_numble = "0001" then 
        sdata<= "00000000";  --set       0x00
        elsif set_numble = "0010" then 
        sdata<= "11001000";   --set video 0xc8
        elsif set_numble = "0011" then 
        sdata<= "00001100";  --set output control  0x0c
------------
        elsif set_numble = "0100" then 
        sdata<= "00010000";--set adc control 0x10
        elsif set_numble = "0101" then 
      --  sdata<= "00001011";  --set input control 0x0b  av1
        elsif set_numble = "0110" then 
      --  sdata<= "00001101";--set input control 0x0b  av4
        elsif set_numble = "0111" then 
        sdata<= "10111001";--set adc0 control 0xc3 
        elsif set_numble = "1000" then 
        sdata<= "10000101";  ---set adc1 control 0xc4 
        elsif set_numble = "1001" then 
        sdata<= "00001111"; --set adc set 0xf3
        elsif set_numble = "1010" then 
        sdata<= "00010010"; --set fast Blankin 0xED





        end if ;
        flat <= "011"; 






          
            if  div_clk_sda = '1' and div_clk_scl = '0' and flat_t2 = '0' then  -- scl = 0
						flat_t2 <= '1';
						if count <=7 then 
						sda <= sdata(7-count);
						end if ;
			elsif div_clk_sda = '0' then 
				flat_t2 <= '0';
			end if ;
			if count = 8 and div_clk_sda = '1' and div_clk_scl = '0' then 
			state <= ack ;
			count <= 0 ;

            set_numble <= set_numble + '1' ; 
    
			end if ;

        

		when stop =>
		if  div_clk_sda = '1' and  div_clk_scl = '0' then  -- scl = 0
			sda <= '0' ;
		elsif div_clk_sda = '0' and  div_clk_scl = '1' then --scl = 1
				sda <= '1' ; 
				
				state <= ready; 
				
		
		end if ;

		when others => null;
		end case;

	end if ; 
end process;

-----------inin i2c------------------

----inin video start--

first_point : process(clk_video,rst_system,data_video)
begin
	if rst_system = '0' then 
        video_state <= "000";	  

		f_video_en <= 'Z';
		cnt_video_en <= '0';
		cnt_vga_en <= '0';
		buf_vga_en <= '0';
	
	elsif rising_edge(clk_video) then
		case video_state is 
			when "000" => 
								if  data_video =x"ff" then 
										video_state <= "001";
								else
										video_state <= "000";
								end if ;
			when "001" => 
								if  data_video =x"00" then 
										video_state <= "010";
								else
										video_state <= "000";
								end if ;
								
			when "010" => 
								if  data_video =x"00" then 
										video_state <= "011";
								else
										video_state <= "000";
								end if ;
			when "011" => 
								if  data_video(5 downto 4)= "11" then 
								video_state <= "100";
								else
								video_state <= "000";
								end if ;
			when "100" => --wait a one peso
								if  data_video =x"ff" then 
										video_state <= "101";
								else
										video_state <= "100";
								end if ;
			when "101" => 
								if  data_video =x"00" then 
										video_state <= "110";
								else
										video_state <= "000";
								end if ;
								
			when "110" => 
								if  data_video =x"00" then 
										video_state <= "111";
								else
										video_state <= "000";
								end if ;
			when "111" => 
								if  data_video(6 downto 4)= "100"  then  --even
									cnt_video_en <= '1';
									cnt_vga_en <= '1';
									buf_vga_en <= '1';
									f_video_en <= '1';

									video_state <= "000";
								elsif  data_video(6 downto 4)= "000"  then  --odd
									cnt_video_en <= '1';
									cnt_vga_en <= '1';
									buf_vga_en <= '1';
									
									f_video_en <= '0';
									
									video_state <= "000"; 
								else
									video_state <= "100";
								end if ;
			when others => null;
		end case;
	end if ;
end process;
----inin video start--

--
--Buf-state---------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, cnt_h_sync_vga, cnt_v_sync_vga, buf_data_state, buf_Y_temp_en, SB_buf_012_en, buf_sobel_cc_en)
begin
if rst_system = '0' then
	range_total_cnt <= 0;
	range_total_cnt_en <= '0';
	buf_Y_temp_en <= '0';
	SB_buf_012_en <= '0';
	buf_sobel_cc_en <= '0';
	buf_sobel_cc_delay <= 0;
	SBB_buf_en <= '0';
	buf_data_state <= "00";
else
	if rising_edge(clk_video) then
		if (buf_vga_en = '1' and f_video_en = '0' and cnt_video_hsync < 1290) then
			if buf_data_state = "11" then
				buf_data_state <= "00";
			else
				buf_data_state <= buf_data_state + '1';
			end if;
			
			if (cnt_video_hsync >= 0 and cnt_video_hsync < 1290 and cnt_v_sync_vga >= 0 and cnt_v_sync_vga < 480) then
				if range_total_cnt_en = '0' then
					if buf_data_state = "11" then
						range_total_cnt_en <= '1';
						SBB_buf_en <= '1';
						SB_buf_012_en <= '1';
						buf_sobel_cc_en <= '1';
					end if;
				else
					if range_total_cnt < 1280 then
						SBB_buf_en <= '1';
						SB_buf_012_en <= '1';
						buf_sobel_cc_en <= '1';
					else
						SBB_buf_en <= '0';
						SB_buf_012_en <= '0';
						buf_sobel_cc_en <= '0';
					end if;
					
					if range_total_cnt = 1289 then
						range_total_cnt <= 1289;
					else
						range_total_cnt <= range_total_cnt + 1;
					end if;
				end if;
			else
				if cnt_v_sync_vga > 480 then
					buf_sobel_cc_delay <= 0;
				end if;
				range_total_cnt <= 0;
				range_total_cnt_en <= '0';
				SB_buf_012_en <= '0';
				buf_sobel_cc_en <= '0';
				SBB_buf_en <= '0';
			end if;
		else
			range_total_cnt <= 0;
			range_total_cnt_en <= '0';
			SB_buf_012_en <= '0';
			buf_sobel_cc_en <= '0';
			SBB_buf_en <= '0';
			buf_data_state <= "00";
		end if;
	end if;
end if;
end process;
--Buf-state---------------------------------------------------------------------------------------------------

--video-count------------------------------------------------------------------------------------------------
process(rst_system, clk_video, cnt_video_en)
begin
if rst_system = '0' then
	cnt_video_hsync <= 0;
	f0_vga_en <= '0';
else
	if rising_edge(clk_video) then
		if cnt_video_en = '1' then
			if cnt_video_hsync = 1715 then
				cnt_video_hsync <= 0;
			else
				cnt_video_hsync <= cnt_video_hsync + 1;
			end if;
			
			if cnt_video_hsync = 857 then
				f0_vga_en <= '1';
			end if;		
		end if;
	end if;
end if;
end process;
--video-count------------------------------------------------------------------------------------------------

--VGA-Sync---------------------------------------------------------------------------------------------------
process(rst_system, clk_video, cnt_vga_en, sync_vga_en, cnt_h_sync_vga, cnt_v_sync_vga)
begin
if rst_system = '0' then
	h_sync_vga <= '1';
	v_sync_vga <= '1';
else
	if rising_edge(clk_video) then
		if (cnt_vga_en = '1' and sync_vga_en = '1') then
			if (cnt_h_sync_vga >= 705 and cnt_h_sync_vga < 808)then --640
				h_sync_vga <= '1';
			else
				h_sync_vga <= '0';
			end if;
			
			if (cnt_v_sync_vga >= 494 and cnt_v_sync_vga < 497)then --480
				v_sync_vga <= '1';
			else
				v_sync_vga <= '0';
			end if;
		else
			h_sync_vga <= '1';
			v_sync_vga <= '1';
		end if;
	end if;
end if;
end process;
--VGA-Sync---------------------------------------------------------------------------------------------------
--VGA-buffer-8bit------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, cnt_video_hsync, buf_vga_state)
begin
if rst_system = '0' then
	buf_vga_state <= "00";
	buf_vga_Y_in_cnt <= 0;
else
	if rising_edge(clk_video) then
		if (buf_vga_en = '1' and cnt_video_hsync < 1280) then
			case buf_vga_state is
				when "00" => buf_vga_state <= "01";
				when "01" => buf_vga_state <= "10";
								 buf_vga_Y(buf_vga_Y_in_cnt) <= data_video(7 downto 0);
								 if buf_vga_Y_in_cnt = 639 then
									 buf_vga_Y_in_cnt <= 0;
								 else
									 buf_vga_Y_in_cnt <= buf_vga_Y_in_cnt + 1;
								 end if;
				when "10" => buf_vga_state <= "11";
				when "11" => buf_vga_state <= "00";
								 buf_vga_Y(buf_vga_Y_in_cnt) <= data_video(7 downto 0);
								 if buf_vga_Y_in_cnt = 639 then
									 buf_vga_Y_in_cnt <= 0;
								 else
									 buf_vga_Y_in_cnt <= buf_vga_Y_in_cnt + 1;
								 end if;
				when others => null;
			end case;
		else
			buf_vga_Y_buf <= buf_vga_Y ;
			buf_vga_state <= "00";
			buf_vga_Y_in_cnt <= 0;
		end if;
	end if;
end if;
end process;
--VGA-buffer-8bit------------------------------------------------------------------------------------------------

--VGA---count------------------------------------------------------------------------------------------------
process(rst_system, clk_video, cnt_vga_en, cnt_h_sync_vga)
begin
if rst_system = '0' then
	black_vga_en <= '0';
	cnt_h_sync_vga <= 0;
	cnt_v_sync_vga <= 0;
	sync_vga_en <= '0';

else
	if rising_edge(clk_video) then
		if cnt_vga_en = '1' then		
			if (f_video_en = '1' or (f_video_en = '0' and f0_vga_en = '1')) then
				sync_vga_en <= '1';
				if cnt_h_sync_vga = 857 then
					cnt_h_sync_vga <= 0;
					if cnt_v_sync_vga = 524 then
						cnt_v_sync_vga <= 0;
						black_vga_en <= '0';

					else
						cnt_v_sync_vga <= cnt_v_sync_vga + 1;
						black_vga_en <= not black_vga_en;
					end if;
				else
					cnt_h_sync_vga <= cnt_h_sync_vga + 1;
				end if;
			end if;
		end if;
	end if;
end if;
end process;
--VGA---count------------------------------------------------------------------------------------------------
--
------VGA-RGB-9bit----------------------------------------------------------------------------------------------------
--process(rst_system, clk_video, f_video_en, black_vga_en, cnt_h_sync_vga, cnt_h_sync_vga)
--begin
--if rst_system = '0' then
	--r_vga <= "000";
	--g_vga <= "000";
	--b_vga <= "000";
	--buf_vga_Y_out_cnt <= 0;
--elsif rising_edge(clk_video) then
		--if (((f_video_en = '0' and black_vga_en = '0') or (f_video_en = '1' and black_vga_en = '1')) and cnt_h_sync_vga > 1 and cnt_h_sync_vga < 640 and cnt_v_sync_vga > 1 and cnt_v_sync_vga < 480)   then
--
			--buf_vga_Y_out_cnt <= buf_vga_Y_out_cnt - 1;
            --r_vga <= buf_vga_Y(buf_vga_Y_out_cnt)(7 downto 5);
			--g_vga <= buf_vga_Y(buf_vga_Y_out_cnt)(7 downto 5);
			--b_vga <= buf_vga_Y(buf_vga_Y_out_cnt)(7 downto 5);
--
			--
		--else
			--r_vga <= "000";
			--g_vga <= "000";
			--b_vga <= "000";
			--buf_vga_Y_out_cnt <= 639;
		--end if;
	--
--end if;
--end process;
------VGA-RGB-9bit---------------------------------------------------------------------------------------------------
-----new---down

--USB: fpga_to_arduino
--port map(
				--clk => clk_video,
				--clk_in => clk_arduino,
				--rst => rst_system,
				--data_out => data_out,
				--x_axis =>	x_axis,
				--y_axis =>	y_axis,
				--click_left   => click_left,
				--click_right  => click_right
--);


--SBB-Buffer--------------------------------------------------------------------------------------------------
addra <= CONV_STD_LOGIC_VECTOR(SBB_buf_cnt, 15);

process(rst_system, clk_video)
begin
if rst_system = '0' then
	SBB_buf_cnt <= 0;
	SBB_buf_out_data <= "00000000";
	SBB_data_delay_1 <= "00000000";
	YAB_XA_cnt <= 1;
	wea <= '0';
	ena <= '0';
else
   if rising_edge(clk_video) then
      if (SBB_buf_en = '1' and SBB_buf_cnt < SBB_buf_cnt_max) then
			if buf_data_state(0) = '0' then
				if YAB_XA_cnt = 3 then
					SBB_buf_out_data <= doutb;
					SBB_data_delay_1 <= dina;
				end if;
				wea <= '0';
				ena <= '0';
			else
				if YAB_XA_cnt = 4 then
					YAB_XA_cnt <= 1;
					if SBB_buf_cnt = SBB_buf_cnt_max then
						SBB_buf_cnt <= SBB_buf_cnt_max;
					else
						SBB_buf_cnt <= SBB_buf_cnt + 1;
					end if;
				else
					YAB_XA_cnt <= YAB_XA_cnt + 1;
				end if;
				
				if YAB_XA_cnt = 1 then
--					dina <= data_video;
					dina <= data_video(7 downto 3)& Dilation_CRB_data & diff & Erosion_CRB_data;
                    --SBB_buf_out_data <= douta;
				    --SBB_data_delay_1 <= data_video(7 downto 3)& Dilation_CRB_data & diff & Erosion_CRB_data;
					wea <= '1';
					ena <= '1';
				else
					wea <= '0';
					ena <= '0';
				end if;
			end if;
		elsif (cnt_h_sync_vga = 857 and cnt_v_sync_vga = 520) then
			SBB_buf_cnt <= 0;
			SBB_buf_out_data <= "00000000";
			SBB_data_delay_1 <= "00000000";
			YAB_XA_cnt <= 1;
			wea <= '0';
			ena <= '0';
		else
			SBB_buf_out_data <= "00000000";
			SBB_data_delay_1 <= "00000000";
			YAB_XA_cnt <= 1;
			wea <= '0';
			ena <= '0';
      end if;
   end if;
end if;
end process;
--SBB-Buffer---
process(clk_video,rst_system,data_video)
begin 
if rst_system = '0' then
diff_video <= "00000000";

elsif rising_edge(clk_video) then 
	if SBB_data_delay_1 > SBB_buf_out_data then 
		diff_video <= SBB_data_delay_1 - SBB_buf_out_data ;
	else
		diff_video <= SBB_buf_out_data - SBB_data_delay_1 ;
	end if ;
--	if sram_data_new > sram_data_old then 
--		diff_video <= sram_data_new - sram_data_old ;
--	else
--		diff_video <= sram_data_old - sram_data_new ;
--	end if ;
	
--		if  diff_video > "00110010" then 
		if  diff_video = "00000000" then 

--		if  diff_video > video_threshold then 
							diff <= '1' ;
		else 
							diff <= '0' ;
		end if ;

end if ;
end process;



--SBB-Buffer--------------------------------------------------------------------------------------------------




------Sobel-Buffer------------------------------------------------------------------------------------------------
--process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, SB_buf_012_en, buf_data_state, SB_buf_0_data_1, SB_buf_0_data_2, SB_buf_0_data_3, SB_buf_1_data_3)
--begin
--if rst_system = '0' then
--	SB_buf_0_data_1 <= "0000000000";
--	SB_buf_0_data_2 <= "0000000000";
--	SB_buf_0_data_3 <= "0000000000";
--	SB_buf_1_data_1 <= "0000000000";
--	SB_buf_1_data_2 <= "0000000000";
--	SB_buf_1_data_3 <= "0000000000";
--	SB_buf_2_data_1 <= "0000000000";
--	SB_buf_2_data_2 <= "0000000000";
--	SB_buf_2_data_3 <= "0000000000";
--	SB_buf_cnt <= 0;
--else
--	if rising_edge(clk_video) then
----		if ((f_video_en = '0' and black_vga_en = '0') and cnt_h_sync_vga >= 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga >= 0 and cnt_v_sync_vga < 480) then
--			if SB_buf_012_en = '1' then
--				if buf_data_state(0) = '0' then
--					SB_buf_0_data_3 <= "00" & SB_buf_0(SB_buf_cnt);
--					SB_buf_0_data_2 <= SB_buf_0_data_3;
--					SB_buf_0_data_1 <= SB_buf_0_data_2;
--					SB_buf_1_data_3 <= "00" & SB_buf_1(SB_buf_cnt);
--					SB_buf_1_data_2 <= SB_buf_1_data_3;
--					SB_buf_1_data_1 <= SB_buf_1_data_2;
--					SB_buf_2_data_3 <= "00" & SB_buf_2(SB_buf_cnt);
--					SB_buf_2_data_2 <= SB_buf_2_data_3;
--					SB_buf_2_data_1 <= SB_buf_2_data_2;
--				else	
--					SB_buf_0(SB_buf_cnt) <= SB_buf_1_data_3(7 downto 0);
--					SB_buf_1(SB_buf_cnt) <= SB_buf_2_data_3(7 downto 0);
--					SB_buf_2(SB_buf_cnt) <= data_video;
----					SB_buf_2(SB_buf_cnt) <= MT_YS_data;
--
----					if SBB_buf_out_data > SBB_data_delay_1 then 
----						SB_buf_2(SB_buf_cnt) <= SBB_buf_out_data - SBB_data_delay_1;
----					else
----						SB_buf_2(SB_buf_cnt) <= SBB_data_delay_1 - SBB_buf_out_data;
----					end if;
--
----					SB_buf_2(SB_buf_cnt) <= SBB_buf_out_data;
--					
--					if SB_buf_cnt = SB_buf_cnt_max then
--						SB_buf_cnt <= SB_buf_cnt_max;
--					else
--						SB_buf_cnt <= SB_buf_cnt + 1;
--					end if;	
--				end if;
--			else
--				SB_buf_0_data_1 <= "0000000000";
--				SB_buf_0_data_2 <= "0000000000";
--				SB_buf_0_data_3 <= "0000000000";
--				SB_buf_1_data_1 <= "0000000000";
--				SB_buf_1_data_2 <= "0000000000";
--				SB_buf_1_data_3 <= "0000000000";
--				SB_buf_2_data_1 <= "0000000000";
--				SB_buf_2_data_2 <= "0000000000";
--				SB_buf_2_data_3 <= "0000000000";
--				SB_buf_cnt <= 0;
--			end if;
----		end if;
--	end if;
--end if;
--end process;
----Sobel-Buffer------------------------------------------------------------------------------------------------
--
----Sobel------------------------------------------------------------------------------------------------------
--process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, buf_sobel_cc_en, buf_data_state, SB_buf_0_data_1, SB_buf_0_data_2, SB_buf_0_data_3, SB_buf_1_data_1, SB_buf_1_data_2, SB_buf_1_data_3, SB_buf_2_data_1, SB_buf_2_data_2, SB_buf_2_data_3, SB_CRB_data)
--variable sobel_x_cc_1 : std_logic_vector(9 downto 0);
--variable sobel_x_cc_2 : std_logic_vector(9 downto 0);
--variable sobel_y_cc_1 : std_logic_vector(9 downto 0);
--variable sobel_y_cc_2 : std_logic_vector(9 downto 0);
--begin
--if rst_system = '0' then
--	SB_XSCR <= "0000000000";
--	SB_YSCR <= "0000000000";
--	SB_CRB_data <= '0';
----	F33_total <= "00000000000";
--else
--	if rising_edge(clk_video) then
----		if ((f_video_en = '0' and black_vga_en = '0') and cnt_h_sync_vga >= 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga >= 0 and cnt_v_sync_vga < 480) then
--			if buf_sobel_cc_en = '1' then
--				if buf_data_state(0) = '1' then
--					sobel_x_cc_1 := SB_buf_0_data_1 + SB_buf_0_data_2 + SB_buf_0_data_2 + SB_buf_0_data_3;
--					sobel_x_cc_2 := SB_buf_2_data_1 + SB_buf_2_data_2 + SB_buf_2_data_2 + SB_buf_2_data_3;
--					sobel_y_cc_1 := SB_buf_0_data_1 + SB_buf_1_data_1 + SB_buf_1_data_1 + SB_buf_2_data_1;
--					sobel_y_cc_2 := SB_buf_0_data_3 + SB_buf_1_data_3 + SB_buf_1_data_3 + SB_buf_2_data_3;
--					if sobel_x_cc_1 >= sobel_x_cc_2 then
--						SB_XSCR <= sobel_x_cc_1 - sobel_x_cc_2;
--					else
--						SB_XSCR <= sobel_x_cc_2 - sobel_x_cc_1;
--					end if;
--					
--					if sobel_y_cc_1 >= sobel_y_cc_2 then
--						SB_YSCR <= sobel_y_cc_1 - sobel_y_cc_2;
--					else
--						SB_YSCR <= sobel_y_cc_2 - sobel_y_cc_1;
--					end if;
--					
--				else
--	
--					if (SB_XSCR > "0001000000" or SB_YSCR > "0001000000") then
--						SB_CRB_data <= '1';
--					else
--						SB_CRB_data <= '0';
--					end if;
--				
--	
--						
--				end if;
--			else
--				SB_XSCR <= "0000000000";
--				SB_YSCR <= "0000000000";
--				SB_CRB_data <= '0';
--			end if;
----		end if;
--	end if;
--end if;
--end process;
----Sobel------------------------------------------------------------------------------------------------------

----Erosion-Buffer------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, SB_buf_012_en, buf_data_state, Erosion_buf_0_data_1, Erosion_buf_0_data_2, Erosion_buf_0_data_3, Erosion_buf_1_data_3)
begin
if rst_system = '0' then
	Erosion_buf_0_data_1 <= "0000000000";
	Erosion_buf_0_data_2 <= "0000000000";
	Erosion_buf_0_data_3 <= "0000000000";
	Erosion_buf_0_data_4 <= "0000000000";
	Erosion_buf_0_data_5 <= "0000000000";
	Erosion_buf_0_data_6 <= "0000000000";
	Erosion_buf_0_data_7 <= "0000000000";
	Erosion_buf_0_data_8 <= "0000000000";
	Erosion_buf_0_data_9 <= "0000000000";
	
	Erosion_buf_1_data_1 <= "0000000000";
	Erosion_buf_1_data_2 <= "0000000000";
	Erosion_buf_1_data_3 <= "0000000000";
	Erosion_buf_1_data_4 <= "0000000000";
	Erosion_buf_1_data_5 <= "0000000000";
	Erosion_buf_1_data_6 <= "0000000000";
	Erosion_buf_1_data_7 <= "0000000000";
	Erosion_buf_1_data_8 <= "0000000000";
	Erosion_buf_1_data_9 <= "0000000000";
	
	Erosion_buf_2_data_1 <= "0000000000";
	Erosion_buf_2_data_2 <= "0000000000";
	Erosion_buf_2_data_3 <= "0000000000";
	Erosion_buf_2_data_4 <= "0000000000";
	Erosion_buf_2_data_5 <= "0000000000";
	Erosion_buf_2_data_6 <= "0000000000";
	Erosion_buf_2_data_7 <= "0000000000";
	Erosion_buf_2_data_8 <= "0000000000";
	Erosion_buf_2_data_9 <= "0000000000";
	
	Erosion_buf_3_data_1 <= "0000000000";
	Erosion_buf_3_data_2 <= "0000000000";
	Erosion_buf_3_data_3 <= "0000000000";
	Erosion_buf_3_data_4 <= "0000000000";
	Erosion_buf_3_data_5 <= "0000000000";
	Erosion_buf_3_data_6 <= "0000000000";
	Erosion_buf_3_data_7 <= "0000000000";
	Erosion_buf_3_data_8 <= "0000000000";
	Erosion_buf_3_data_9 <= "0000000000";
	
	Erosion_buf_4_data_1 <= "0000000000";
	Erosion_buf_4_data_2 <= "0000000000";
	Erosion_buf_4_data_3 <= "0000000000";
	Erosion_buf_4_data_4 <= "0000000000";
	Erosion_buf_4_data_5 <= "0000000000";
	Erosion_buf_4_data_6 <= "0000000000";
	Erosion_buf_4_data_7 <= "0000000000";
	Erosion_buf_4_data_8 <= "0000000000";
	Erosion_buf_4_data_9 <= "0000000000";
	
	Erosion_buf_5_data_1 <= "0000000000";
	Erosion_buf_5_data_2 <= "0000000000";
	Erosion_buf_5_data_3 <= "0000000000";
	Erosion_buf_5_data_4 <= "0000000000";
	Erosion_buf_5_data_5 <= "0000000000";
	Erosion_buf_5_data_6 <= "0000000000";
	Erosion_buf_5_data_7 <= "0000000000";
	Erosion_buf_5_data_8 <= "0000000000";
	Erosion_buf_5_data_9 <= "0000000000";
	
	Erosion_buf_6_data_1 <= "0000000000";
	Erosion_buf_6_data_2 <= "0000000000";
	Erosion_buf_6_data_3 <= "0000000000";
	Erosion_buf_6_data_4 <= "0000000000";
	Erosion_buf_6_data_5 <= "0000000000";
	Erosion_buf_6_data_6 <= "0000000000";
	Erosion_buf_6_data_7 <= "0000000000";
	Erosion_buf_6_data_8 <= "0000000000";
	Erosion_buf_6_data_9 <= "0000000000";

	Erosion_buf_7_data_1 <= "0000000000";
	Erosion_buf_7_data_2 <= "0000000000";
	Erosion_buf_7_data_3 <= "0000000000";
	Erosion_buf_7_data_4 <= "0000000000";
	Erosion_buf_7_data_5 <= "0000000000";
	Erosion_buf_7_data_6 <= "0000000000";
	Erosion_buf_7_data_7 <= "0000000000";
	Erosion_buf_7_data_8 <= "0000000000";
	Erosion_buf_7_data_9 <= "0000000000";
	
	Erosion_buf_8_data_1 <= "0000000000";
	Erosion_buf_8_data_2 <= "0000000000";
	Erosion_buf_8_data_3 <= "0000000000";
	Erosion_buf_8_data_4 <= "0000000000";
	Erosion_buf_8_data_5 <= "0000000000";
	Erosion_buf_8_data_6 <= "0000000000";
	Erosion_buf_8_data_7 <= "0000000000";
	Erosion_buf_8_data_8 <= "0000000000";
	Erosion_buf_8_data_9 <= "0000000000";
	
	
	--Erosion_buf_cnt <= 0;
else
	if rising_edge(clk_video) then
--		if ((f_video_en = '0' and black_vga_en = '0') and cnt_h_sync_vga >= 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga >= 0 and cnt_v_sync_vga < 480) then
			if SB_buf_012_en = '1' then
				if buf_data_state(0) = '0' then
					Erosion_buf_0_data_9 <= "00" & Erosion_buf_0(SB_buf_cnt);
					Erosion_buf_0_data_8 <= Erosion_buf_0_data_9;
					Erosion_buf_0_data_7 <= Erosion_buf_0_data_8;
					Erosion_buf_0_data_6 <= Erosion_buf_0_data_7;
					Erosion_buf_0_data_5 <= Erosion_buf_0_data_6;
					Erosion_buf_0_data_4 <= Erosion_buf_0_data_5;
					Erosion_buf_0_data_3 <= Erosion_buf_0_data_4;
					Erosion_buf_0_data_2 <= Erosion_buf_0_data_3;
					Erosion_buf_0_data_1 <= Erosion_buf_0_data_2;
					
					Erosion_buf_1_data_9 <= "00" & Erosion_buf_1(SB_buf_cnt);
					Erosion_buf_1_data_8 <= Erosion_buf_1_data_9;
					Erosion_buf_1_data_7 <= Erosion_buf_1_data_8;
					Erosion_buf_1_data_6 <= Erosion_buf_1_data_7;
					Erosion_buf_1_data_5 <= Erosion_buf_1_data_6;
					Erosion_buf_1_data_4 <= Erosion_buf_1_data_5;
					Erosion_buf_1_data_3 <= Erosion_buf_1_data_4;
					Erosion_buf_1_data_2 <= Erosion_buf_1_data_3;
					Erosion_buf_1_data_1 <= Erosion_buf_1_data_2;
					
					Erosion_buf_2_data_9 <= "00" & Erosion_buf_2(SB_buf_cnt);
					Erosion_buf_2_data_8 <= Erosion_buf_2_data_9;
					Erosion_buf_2_data_7 <= Erosion_buf_2_data_8;
					Erosion_buf_2_data_6 <= Erosion_buf_2_data_7;
					Erosion_buf_2_data_5 <= Erosion_buf_2_data_6;
					Erosion_buf_2_data_4 <= Erosion_buf_2_data_5;
					Erosion_buf_2_data_3 <= Erosion_buf_2_data_4;
					Erosion_buf_2_data_2 <= Erosion_buf_2_data_3;
					Erosion_buf_2_data_1 <= Erosion_buf_2_data_2;
					
					Erosion_buf_3_data_9 <= "00" & Erosion_buf_3(SB_buf_cnt);
					Erosion_buf_3_data_8 <= Erosion_buf_3_data_9;
					Erosion_buf_3_data_7 <= Erosion_buf_3_data_8;
					Erosion_buf_3_data_6 <= Erosion_buf_3_data_7;
					Erosion_buf_3_data_5 <= Erosion_buf_3_data_6;
					Erosion_buf_3_data_4 <= Erosion_buf_3_data_5;
					Erosion_buf_3_data_3 <= Erosion_buf_3_data_4;
					Erosion_buf_3_data_2 <= Erosion_buf_3_data_3;
					Erosion_buf_3_data_1 <= Erosion_buf_3_data_2;
					
					Erosion_buf_4_data_9 <= "00" & Erosion_buf_4(SB_buf_cnt);
					Erosion_buf_4_data_8 <= Erosion_buf_4_data_9;
					Erosion_buf_4_data_7 <= Erosion_buf_4_data_8;
					Erosion_buf_4_data_6 <= Erosion_buf_4_data_7;
					Erosion_buf_4_data_5 <= Erosion_buf_4_data_6;
					Erosion_buf_4_data_4 <= Erosion_buf_4_data_5;
					Erosion_buf_4_data_3 <= Erosion_buf_4_data_4;
					Erosion_buf_4_data_2 <= Erosion_buf_4_data_3;
					Erosion_buf_4_data_1 <= Erosion_buf_4_data_2;
					
					Erosion_buf_5_data_9 <= "00" & Erosion_buf_5(SB_buf_cnt);
					Erosion_buf_5_data_8 <= Erosion_buf_5_data_9;
					Erosion_buf_5_data_7 <= Erosion_buf_5_data_8;
					Erosion_buf_5_data_6 <= Erosion_buf_5_data_7;
					Erosion_buf_5_data_5 <= Erosion_buf_5_data_6;
					Erosion_buf_5_data_4 <= Erosion_buf_5_data_5;
					Erosion_buf_5_data_3 <= Erosion_buf_5_data_4;
					Erosion_buf_5_data_2 <= Erosion_buf_5_data_3;
					Erosion_buf_5_data_1 <= Erosion_buf_5_data_2;
					
					Erosion_buf_6_data_9 <= "00" & Erosion_buf_6(SB_buf_cnt);
					Erosion_buf_6_data_8 <= Erosion_buf_6_data_9;
					Erosion_buf_6_data_7 <= Erosion_buf_6_data_8;
					Erosion_buf_6_data_6 <= Erosion_buf_6_data_7;
					Erosion_buf_6_data_5 <= Erosion_buf_6_data_6;
					Erosion_buf_6_data_4 <= Erosion_buf_6_data_5;
					Erosion_buf_6_data_3 <= Erosion_buf_6_data_4;
					Erosion_buf_6_data_2 <= Erosion_buf_6_data_3;
					Erosion_buf_6_data_1 <= Erosion_buf_6_data_2;
					
					Erosion_buf_7_data_9 <= "00" & Erosion_buf_7(SB_buf_cnt);
					Erosion_buf_7_data_8 <= Erosion_buf_7_data_9;
					Erosion_buf_7_data_7 <= Erosion_buf_7_data_8;
					Erosion_buf_7_data_6 <= Erosion_buf_7_data_7;
					Erosion_buf_7_data_5 <= Erosion_buf_7_data_6;
					Erosion_buf_7_data_4 <= Erosion_buf_7_data_5;
					Erosion_buf_7_data_3 <= Erosion_buf_7_data_4;
					Erosion_buf_7_data_2 <= Erosion_buf_7_data_3;
					Erosion_buf_7_data_1 <= Erosion_buf_7_data_2;
					
					Erosion_buf_8_data_9 <= "00" & Erosion_buf_8(SB_buf_cnt);
					Erosion_buf_8_data_8 <= Erosion_buf_8_data_9;
					Erosion_buf_8_data_7 <= Erosion_buf_8_data_8;
					Erosion_buf_8_data_6 <= Erosion_buf_8_data_7;
					Erosion_buf_8_data_5 <= Erosion_buf_8_data_6;
					Erosion_buf_8_data_4 <= Erosion_buf_8_data_5;
					Erosion_buf_8_data_3 <= Erosion_buf_8_data_4;
					Erosion_buf_8_data_2 <= Erosion_buf_8_data_3;
					Erosion_buf_8_data_1 <= Erosion_buf_8_data_2;
				
				else	
					Erosion_buf_0(SB_buf_cnt) <= Erosion_buf_1_data_9(7 downto 0);
					Erosion_buf_1(SB_buf_cnt) <= Erosion_buf_2_data_9(7 downto 0);
					Erosion_buf_2(SB_buf_cnt) <= Erosion_buf_3_data_9(7 downto 0);
					Erosion_buf_3(SB_buf_cnt) <= Erosion_buf_4_data_9(7 downto 0);
					Erosion_buf_4(SB_buf_cnt) <= Erosion_buf_5_data_9(7 downto 0);
					Erosion_buf_5(SB_buf_cnt) <= Erosion_buf_6_data_9(7 downto 0);
					Erosion_buf_6(SB_buf_cnt) <= Erosion_buf_7_data_9(7 downto 0);
					Erosion_buf_7(SB_buf_cnt) <= Erosion_buf_8_data_9(7 downto 0);
					
					
					
--					Erosion_buf_0(SB_buf_cnt) <= Erosion_buf_1_data_3(7 downto 0);
--					Erosion_buf_1(SB_buf_cnt) <= Erosion_buf_2_data_3(7 downto 0);
--			
					
					if SBB_buf_out_data(1) = '1' then 
						Erosion_buf_8(SB_buf_cnt) <= x"01";
					else
						Erosion_buf_8(SB_buf_cnt) <= x"00";
					end if;
--					if ((SBB_buf_out_data(1) = '1' and	SBB_data_delay_1(1) = '0') or (SBB_buf_out_data(1) = '0' and	SBB_data_delay_1(1) = '1')) then
				
				end if;
			else
	Erosion_buf_0_data_1 <= "0000000000";
	Erosion_buf_0_data_2 <= "0000000000";
	Erosion_buf_0_data_3 <= "0000000000";
	Erosion_buf_0_data_4 <= "0000000000";
	Erosion_buf_0_data_5 <= "0000000000";
	Erosion_buf_0_data_6 <= "0000000000";
	Erosion_buf_0_data_7 <= "0000000000";
	Erosion_buf_0_data_8 <= "0000000000";
	Erosion_buf_0_data_9 <= "0000000000";
	Erosion_buf_1_data_1 <= "0000000000";
	Erosion_buf_1_data_2 <= "0000000000";
	Erosion_buf_1_data_3 <= "0000000000";
	Erosion_buf_1_data_4 <= "0000000000";
	Erosion_buf_1_data_5 <= "0000000000";
	Erosion_buf_1_data_6 <= "0000000000";
	Erosion_buf_1_data_7 <= "0000000000";
	Erosion_buf_1_data_8 <= "0000000000";
	Erosion_buf_1_data_9 <= "0000000000";
	Erosion_buf_2_data_1 <= "0000000000";
	Erosion_buf_2_data_2 <= "0000000000";
	Erosion_buf_2_data_3 <= "0000000000";
	Erosion_buf_2_data_4 <= "0000000000";
	Erosion_buf_2_data_5 <= "0000000000";
	Erosion_buf_2_data_6 <= "0000000000";
	Erosion_buf_2_data_7 <= "0000000000";
	Erosion_buf_2_data_8 <= "0000000000";
	Erosion_buf_2_data_9 <= "0000000000";
	Erosion_buf_3_data_1 <= "0000000000";
	Erosion_buf_3_data_2 <= "0000000000";
	Erosion_buf_3_data_3 <= "0000000000";
	Erosion_buf_3_data_4 <= "0000000000";
	Erosion_buf_3_data_5 <= "0000000000";
	Erosion_buf_3_data_6 <= "0000000000";
	Erosion_buf_3_data_7 <= "0000000000";
	Erosion_buf_3_data_8 <= "0000000000";
	Erosion_buf_3_data_9 <= "0000000000";
	Erosion_buf_4_data_1 <= "0000000000";
	Erosion_buf_4_data_2 <= "0000000000";
	Erosion_buf_4_data_3 <= "0000000000";
	Erosion_buf_4_data_4 <= "0000000000";
	Erosion_buf_4_data_5 <= "0000000000";
	Erosion_buf_4_data_6 <= "0000000000";
	Erosion_buf_4_data_7 <= "0000000000";
	Erosion_buf_4_data_8 <= "0000000000";
	Erosion_buf_4_data_9 <= "0000000000";
	Erosion_buf_5_data_1 <= "0000000000";
	Erosion_buf_5_data_2 <= "0000000000";
	Erosion_buf_5_data_3 <= "0000000000";
	Erosion_buf_5_data_4 <= "0000000000";
	Erosion_buf_5_data_5 <= "0000000000";
	Erosion_buf_5_data_6 <= "0000000000";
	Erosion_buf_5_data_7 <= "0000000000";
	Erosion_buf_5_data_8 <= "0000000000";
	Erosion_buf_5_data_9 <= "0000000000";
	Erosion_buf_6_data_1 <= "0000000000";
	Erosion_buf_6_data_2 <= "0000000000";
	Erosion_buf_6_data_3 <= "0000000000";
	Erosion_buf_6_data_4 <= "0000000000";
	Erosion_buf_6_data_5 <= "0000000000";
	Erosion_buf_6_data_6 <= "0000000000";
	Erosion_buf_6_data_7 <= "0000000000";
	Erosion_buf_6_data_8 <= "0000000000";
	Erosion_buf_6_data_9 <= "0000000000";
	Erosion_buf_7_data_1 <= "0000000000";
	Erosion_buf_7_data_2 <= "0000000000";
	Erosion_buf_7_data_3 <= "0000000000";
	Erosion_buf_7_data_4 <= "0000000000";
	Erosion_buf_7_data_5 <= "0000000000";
	Erosion_buf_7_data_6 <= "0000000000";
	Erosion_buf_7_data_7 <= "0000000000";
	Erosion_buf_7_data_8 <= "0000000000";
	Erosion_buf_7_data_9 <= "0000000000";
	Erosion_buf_8_data_1 <= "0000000000";
	Erosion_buf_8_data_2 <= "0000000000";
	Erosion_buf_8_data_3 <= "0000000000";
	Erosion_buf_8_data_4 <= "0000000000";
	Erosion_buf_8_data_5 <= "0000000000";
	Erosion_buf_8_data_6 <= "0000000000";
	Erosion_buf_8_data_7 <= "0000000000";
	Erosion_buf_8_data_8 <= "0000000000";
	Erosion_buf_8_data_9 <= "0000000000";
	
				Erosion_buf_cnt <= 0;
			end if;
--		end if;
	end if;
end if;
end process;
--Erosion-Buffer------------------------------------------------------------------------------------------------

--Erosion------------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, buf_sobel_cc_en, buf_data_state, Erosion_buf_0_data_1, Erosion_buf_0_data_2, Erosion_buf_0_data_3, Erosion_buf_1_data_1, Erosion_buf_1_data_2, Erosion_buf_1_data_3, Erosion_buf_2_data_1, Erosion_buf_2_data_2, Erosion_buf_2_data_3, Erosion_CRB_data)
variable Erosion_x_cc_1 : std_logic_vector(9 downto 0);
variable Erosion_x_cc_2 : std_logic_vector(9 downto 0);
variable Erosion_y_cc_1 : std_logic_vector(9 downto 0);
variable Erosion_y_cc_2 : std_logic_vector(9 downto 0);
begin
if rst_system = '0' then
	Erosion_XSCR <= "0000000000";
	Erosion_YSCR <= "0000000000";
	Erosion_CRB_data <= '0';
--	F33_total <= "00000000000";
else
	if rising_edge(clk_video) then
			if buf_sobel_cc_en = '1' then
				if buf_data_state(0) = '1' then
					  Erosion_XSCR <= Erosion_buf_0_data_1 + Erosion_buf_0_data_2 + Erosion_buf_0_data_3 + Erosion_buf_0_data_4 + Erosion_buf_0_data_5 + Erosion_buf_0_data_6 + Erosion_buf_0_data_7 + Erosion_buf_0_data_8 + Erosion_buf_0_data_9 +
											Erosion_buf_1_data_1 + Erosion_buf_1_data_2 + Erosion_buf_1_data_3 + Erosion_buf_1_data_4 + Erosion_buf_1_data_5 + Erosion_buf_1_data_6 + Erosion_buf_1_data_7 + Erosion_buf_1_data_8 + Erosion_buf_1_data_9 +
											Erosion_buf_2_data_1 + Erosion_buf_2_data_2 + Erosion_buf_2_data_3 + Erosion_buf_2_data_4 + Erosion_buf_2_data_5 + Erosion_buf_2_data_6 + Erosion_buf_2_data_7 + Erosion_buf_2_data_8 + Erosion_buf_2_data_9 +
											Erosion_buf_3_data_1 + Erosion_buf_3_data_2 + Erosion_buf_3_data_3 + Erosion_buf_3_data_4 + Erosion_buf_3_data_5 + Erosion_buf_3_data_6 + Erosion_buf_3_data_7 + Erosion_buf_3_data_8 + Erosion_buf_3_data_9 +
											Erosion_buf_4_data_1 + Erosion_buf_4_data_2 + Erosion_buf_4_data_3 + Erosion_buf_4_data_4 + Erosion_buf_4_data_5 + Erosion_buf_4_data_6 + Erosion_buf_4_data_7 + Erosion_buf_4_data_8 + Erosion_buf_4_data_9 +
											Erosion_buf_5_data_1 + Erosion_buf_5_data_2 + Erosion_buf_5_data_3 + Erosion_buf_5_data_4 + Erosion_buf_5_data_5 + Erosion_buf_5_data_6 + Erosion_buf_5_data_7 + Erosion_buf_5_data_8 + Erosion_buf_5_data_9 +
											Erosion_buf_6_data_1 + Erosion_buf_6_data_2 + Erosion_buf_6_data_3 + Erosion_buf_6_data_4 + Erosion_buf_6_data_5 + Erosion_buf_6_data_6 + Erosion_buf_6_data_7 + Erosion_buf_6_data_8 + Erosion_buf_6_data_9 +
    										Erosion_buf_7_data_1 + Erosion_buf_7_data_2 + Erosion_buf_7_data_3 + Erosion_buf_7_data_4 + Erosion_buf_7_data_5 + Erosion_buf_7_data_6 + Erosion_buf_7_data_7 + Erosion_buf_7_data_8 + Erosion_buf_7_data_9 +
											Erosion_buf_8_data_1 + Erosion_buf_8_data_2 + Erosion_buf_8_data_3 + Erosion_buf_8_data_4 + Erosion_buf_8_data_5 + Erosion_buf_8_data_6 + Erosion_buf_8_data_7 + Erosion_buf_8_data_8 + Erosion_buf_8_data_9 ;	
				else						
					
					if Erosion_XSCR > "0000111100"  then
						Erosion_CRB_data <= '1';
					else
						Erosion_CRB_data <= '0';
					end if;
						
				end if;
			else
				Erosion_XSCR <= "0000000000";
				Erosion_YSCR <= "0000000000";
				Erosion_CRB_data <= '0';
			end if;
--		end if;
	end if;
end if;
end process;
--Erosion------------------------------------------------------------------------------------------------------
--Dilation-Buffer------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, SB_buf_012_en, buf_data_state, Dilation_buf_0_data_1, Dilation_buf_0_data_2, Dilation_buf_0_data_3, Dilation_buf_1_data_3)
begin
if rst_system = '0' then
	Dilation_buf_0_data_1 <= "0000000000";
	Dilation_buf_0_data_2 <= "0000000000";
	Dilation_buf_0_data_3 <= "0000000000";
	Dilation_buf_0_data_4 <= "0000000000";
	Dilation_buf_0_data_5 <= "0000000000";
	Dilation_buf_0_data_6 <= "0000000000";
	Dilation_buf_0_data_7 <= "0000000000";
	Dilation_buf_0_data_8 <= "0000000000";
	Dilation_buf_0_data_9 <= "0000000000";
	Dilation_buf_1_data_1 <= "0000000000";
	Dilation_buf_1_data_2 <= "0000000000";
	Dilation_buf_1_data_3 <= "0000000000";
	Dilation_buf_1_data_4 <= "0000000000";
	Dilation_buf_1_data_5 <= "0000000000";
	Dilation_buf_1_data_6 <= "0000000000";
	Dilation_buf_1_data_7 <= "0000000000";
	Dilation_buf_1_data_8 <= "0000000000";
	Dilation_buf_1_data_9 <= "0000000000";
	Dilation_buf_2_data_1 <= "0000000000";
	Dilation_buf_2_data_2 <= "0000000000";
	Dilation_buf_2_data_3 <= "0000000000";
	Dilation_buf_2_data_4 <= "0000000000";
	Dilation_buf_2_data_5 <= "0000000000";
	Dilation_buf_2_data_6 <= "0000000000";
	Dilation_buf_2_data_7 <= "0000000000";
	Dilation_buf_2_data_8 <= "0000000000";
	Dilation_buf_2_data_9 <= "0000000000";
	Dilation_buf_3_data_1 <= "0000000000";
	Dilation_buf_3_data_2 <= "0000000000";
	Dilation_buf_3_data_3 <= "0000000000";
	Dilation_buf_3_data_4 <= "0000000000";
	Dilation_buf_3_data_5 <= "0000000000";
	Dilation_buf_3_data_6 <= "0000000000";
	Dilation_buf_3_data_7 <= "0000000000";
	Dilation_buf_3_data_8 <= "0000000000";
	Dilation_buf_3_data_9 <= "0000000000";
	Dilation_buf_4_data_1 <= "0000000000";
	Dilation_buf_4_data_2 <= "0000000000";
	Dilation_buf_4_data_3 <= "0000000000";
	Dilation_buf_4_data_4 <= "0000000000";
	Dilation_buf_4_data_5 <= "0000000000";
	Dilation_buf_4_data_6 <= "0000000000";
	Dilation_buf_4_data_7 <= "0000000000";
	Dilation_buf_4_data_8 <= "0000000000";
	Dilation_buf_4_data_9 <= "0000000000";
	Dilation_buf_5_data_1 <= "0000000000";
	Dilation_buf_5_data_2 <= "0000000000";
	Dilation_buf_5_data_3 <= "0000000000";
	Dilation_buf_5_data_4 <= "0000000000";
	Dilation_buf_5_data_5 <= "0000000000";
	Dilation_buf_5_data_6 <= "0000000000";
	Dilation_buf_5_data_7 <= "0000000000";
	Dilation_buf_5_data_8 <= "0000000000";
	Dilation_buf_5_data_9 <= "0000000000";
	Dilation_buf_6_data_1 <= "0000000000";
	Dilation_buf_6_data_2 <= "0000000000";
	Dilation_buf_6_data_3 <= "0000000000";
	Dilation_buf_6_data_4 <= "0000000000";
	Dilation_buf_6_data_5 <= "0000000000";
	Dilation_buf_6_data_6 <= "0000000000";
	Dilation_buf_6_data_7 <= "0000000000";
	Dilation_buf_6_data_8 <= "0000000000";
	Dilation_buf_6_data_9 <= "0000000000";
	Dilation_buf_7_data_1 <= "0000000000";
	Dilation_buf_7_data_2 <= "0000000000";
	Dilation_buf_7_data_3 <= "0000000000";
	Dilation_buf_7_data_4 <= "0000000000";
	Dilation_buf_7_data_5 <= "0000000000";
	Dilation_buf_7_data_6 <= "0000000000";
	Dilation_buf_7_data_7 <= "0000000000";
	Dilation_buf_7_data_8 <= "0000000000";
	Dilation_buf_7_data_9 <= "0000000000";
	Dilation_buf_8_data_1 <= "0000000000";
	Dilation_buf_8_data_2 <= "0000000000";
	Dilation_buf_8_data_3 <= "0000000000";
	Dilation_buf_8_data_4 <= "0000000000";
	Dilation_buf_8_data_5 <= "0000000000";
	Dilation_buf_8_data_6 <= "0000000000";
	Dilation_buf_8_data_7 <= "0000000000";
	Dilation_buf_8_data_8 <= "0000000000";
	Dilation_buf_8_data_9 <= "0000000000";

	--Dilation_buf_cnt <= 0;
else
	if rising_edge(clk_video) then
--		if ((f_video_en = '0' and black_vga_en = '0') and cnt_h_sync_vga >= 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga >= 0 and cnt_v_sync_vga < 480) then
			if SB_buf_012_en = '1' then
				if buf_data_state(0) = '0' then
					
					Dilation_buf_0_data_9 <= "00" & Dilation_buf_0(SB_buf_cnt);
					Dilation_buf_0_data_8 <= Dilation_buf_0_data_9;
					Dilation_buf_0_data_7 <= Dilation_buf_0_data_8;
					Dilation_buf_0_data_6 <= Dilation_buf_0_data_7;
					Dilation_buf_0_data_5 <= Dilation_buf_0_data_6;
					Dilation_buf_0_data_4 <= Dilation_buf_0_data_5;
					Dilation_buf_0_data_3 <= Dilation_buf_0_data_4;
					Dilation_buf_0_data_2 <= Dilation_buf_0_data_3;
					Dilation_buf_0_data_1 <= Dilation_buf_0_data_2;
					
					Dilation_buf_1_data_9 <= "00" & Dilation_buf_1(SB_buf_cnt);
					Dilation_buf_1_data_8 <= Dilation_buf_1_data_9;
					Dilation_buf_1_data_7 <= Dilation_buf_1_data_8;
					Dilation_buf_1_data_6 <= Dilation_buf_1_data_7;
					Dilation_buf_1_data_5 <= Dilation_buf_1_data_6;
					Dilation_buf_1_data_4 <= Dilation_buf_1_data_5;
					Dilation_buf_1_data_3 <= Dilation_buf_1_data_4;
					Dilation_buf_1_data_2 <= Dilation_buf_1_data_3;
					Dilation_buf_1_data_1 <= Dilation_buf_1_data_2;
					
					Dilation_buf_2_data_9 <= "00" & Dilation_buf_2(SB_buf_cnt);
					Dilation_buf_2_data_8 <= Dilation_buf_2_data_9;
					Dilation_buf_2_data_7 <= Dilation_buf_2_data_8;
					Dilation_buf_2_data_6 <= Dilation_buf_2_data_7;
					Dilation_buf_2_data_5 <= Dilation_buf_2_data_6;
					Dilation_buf_2_data_4 <= Dilation_buf_2_data_5;
					Dilation_buf_2_data_3 <= Dilation_buf_2_data_4;
					Dilation_buf_2_data_2 <= Dilation_buf_2_data_3;
					Dilation_buf_2_data_1 <= Dilation_buf_2_data_2;
					
					Dilation_buf_3_data_9 <= "00" & Dilation_buf_3(SB_buf_cnt);
					Dilation_buf_3_data_8 <= Dilation_buf_3_data_9;
					Dilation_buf_3_data_7 <= Dilation_buf_3_data_8;
					Dilation_buf_3_data_6 <= Dilation_buf_3_data_7;
					Dilation_buf_3_data_5 <= Dilation_buf_3_data_6;
					Dilation_buf_3_data_4 <= Dilation_buf_3_data_5;
					Dilation_buf_3_data_3 <= Dilation_buf_3_data_4;
					Dilation_buf_3_data_2 <= Dilation_buf_3_data_3;
					Dilation_buf_3_data_1 <= Dilation_buf_3_data_2;
					
					Dilation_buf_4_data_9 <= "00" & Dilation_buf_4(SB_buf_cnt);
					Dilation_buf_4_data_8 <= Dilation_buf_4_data_9;
					Dilation_buf_4_data_7 <= Dilation_buf_4_data_8;
					Dilation_buf_4_data_6 <= Dilation_buf_4_data_7;
					Dilation_buf_4_data_5 <= Dilation_buf_4_data_6;
					Dilation_buf_4_data_4 <= Dilation_buf_4_data_5;
					Dilation_buf_4_data_3 <= Dilation_buf_4_data_4;
					Dilation_buf_4_data_2 <= Dilation_buf_4_data_3;
					Dilation_buf_4_data_1 <= Dilation_buf_4_data_2;
					
					Dilation_buf_5_data_9 <= "00" & Dilation_buf_5(SB_buf_cnt);
					Dilation_buf_5_data_8 <= Dilation_buf_5_data_9;
					Dilation_buf_5_data_7 <= Dilation_buf_5_data_8;
					Dilation_buf_5_data_6 <= Dilation_buf_5_data_7;
					Dilation_buf_5_data_5 <= Dilation_buf_5_data_6;
					Dilation_buf_5_data_4 <= Dilation_buf_5_data_5;
					Dilation_buf_5_data_3 <= Dilation_buf_5_data_4;
					Dilation_buf_5_data_2 <= Dilation_buf_5_data_3;
					Dilation_buf_5_data_1 <= Dilation_buf_5_data_2;
					
					Dilation_buf_6_data_9 <= "00" & Dilation_buf_6(SB_buf_cnt);
					Dilation_buf_6_data_8 <= Dilation_buf_6_data_9;
					Dilation_buf_6_data_7 <= Dilation_buf_6_data_8;
					Dilation_buf_6_data_6 <= Dilation_buf_6_data_7;
					Dilation_buf_6_data_5 <= Dilation_buf_6_data_6;
					Dilation_buf_6_data_4 <= Dilation_buf_6_data_5;
					Dilation_buf_6_data_3 <= Dilation_buf_6_data_4;
					Dilation_buf_6_data_2 <= Dilation_buf_6_data_3;
					Dilation_buf_6_data_1 <= Dilation_buf_6_data_2;
					
					Dilation_buf_7_data_9 <= "00" & Dilation_buf_7(SB_buf_cnt);
					Dilation_buf_7_data_8 <= Dilation_buf_7_data_9;
					Dilation_buf_7_data_7 <= Dilation_buf_7_data_8;
					Dilation_buf_7_data_6 <= Dilation_buf_7_data_7;
					Dilation_buf_7_data_5 <= Dilation_buf_7_data_6;
					Dilation_buf_7_data_4 <= Dilation_buf_7_data_5;
					Dilation_buf_7_data_3 <= Dilation_buf_7_data_4;
					Dilation_buf_7_data_2 <= Dilation_buf_7_data_3;
					Dilation_buf_7_data_1 <= Dilation_buf_7_data_2;
					
					Dilation_buf_8_data_9 <= "00" & Dilation_buf_8(SB_buf_cnt);
					Dilation_buf_8_data_8 <= Dilation_buf_8_data_9;
					Dilation_buf_8_data_7 <= Dilation_buf_8_data_8;
					Dilation_buf_8_data_6 <= Dilation_buf_8_data_7;
					Dilation_buf_8_data_5 <= Dilation_buf_8_data_6;
					Dilation_buf_8_data_4 <= Dilation_buf_8_data_5;
					Dilation_buf_8_data_3 <= Dilation_buf_8_data_4;
					Dilation_buf_8_data_2 <= Dilation_buf_8_data_3;
					Dilation_buf_8_data_1 <= Dilation_buf_8_data_2;

				else	
					Dilation_buf_0(SB_buf_cnt) <= Dilation_buf_1_data_9(7 downto 0);
					Dilation_buf_1(SB_buf_cnt) <= Dilation_buf_2_data_9(7 downto 0);
					Dilation_buf_2(SB_buf_cnt) <= Dilation_buf_3_data_9(7 downto 0);
					Dilation_buf_3(SB_buf_cnt) <= Dilation_buf_4_data_9(7 downto 0);
					Dilation_buf_4(SB_buf_cnt) <= Dilation_buf_5_data_9(7 downto 0);
					Dilation_buf_5(SB_buf_cnt) <= Dilation_buf_6_data_9(7 downto 0);
					Dilation_buf_6(SB_buf_cnt) <= Dilation_buf_7_data_9(7 downto 0);
					Dilation_buf_7(SB_buf_cnt) <= Dilation_buf_8_data_9(7 downto 0);
					
--					Dilation_buf_0(SB_buf_cnt) <= Dilation_buf_1_data_3(7 downto 0);
--					Dilation_buf_1(SB_buf_cnt) <= Dilation_buf_2_data_3(7 downto 0);

					
					if SBB_buf_out_data(0) = '1'  then
						Dilation_buf_2(SB_buf_cnt) <= x"01";
					else
						Dilation_buf_2(SB_buf_cnt) <= x"00";
					end if;
				end if;
			else
	Dilation_buf_0_data_1 <= "0000000000";
	Dilation_buf_0_data_2 <= "0000000000";
	Dilation_buf_0_data_3 <= "0000000000";
	Dilation_buf_0_data_4 <= "0000000000";
	Dilation_buf_0_data_5 <= "0000000000";
	Dilation_buf_0_data_6 <= "0000000000";
	Dilation_buf_0_data_7 <= "0000000000";
	Dilation_buf_0_data_8 <= "0000000000";
	Dilation_buf_0_data_9 <= "0000000000";
	Dilation_buf_1_data_1 <= "0000000000";
	Dilation_buf_1_data_2 <= "0000000000";
	Dilation_buf_1_data_3 <= "0000000000";
	Dilation_buf_1_data_4 <= "0000000000";
	Dilation_buf_1_data_5 <= "0000000000";
	Dilation_buf_1_data_6 <= "0000000000";
	Dilation_buf_1_data_7 <= "0000000000";
	Dilation_buf_1_data_8 <= "0000000000";
	Dilation_buf_1_data_9 <= "0000000000";
	Dilation_buf_2_data_1 <= "0000000000";
	Dilation_buf_2_data_2 <= "0000000000";
	Dilation_buf_2_data_3 <= "0000000000";
	Dilation_buf_2_data_4 <= "0000000000";
	Dilation_buf_2_data_5 <= "0000000000";
	Dilation_buf_2_data_6 <= "0000000000";
	Dilation_buf_2_data_7 <= "0000000000";
	Dilation_buf_2_data_8 <= "0000000000";
	Dilation_buf_2_data_9 <= "0000000000";
	Dilation_buf_3_data_1 <= "0000000000";
	Dilation_buf_3_data_2 <= "0000000000";
	Dilation_buf_3_data_3 <= "0000000000";
	Dilation_buf_3_data_4 <= "0000000000";
	Dilation_buf_3_data_5 <= "0000000000";
	Dilation_buf_3_data_6 <= "0000000000";
	Dilation_buf_3_data_7 <= "0000000000";
	Dilation_buf_3_data_8 <= "0000000000";
	Dilation_buf_3_data_9 <= "0000000000";
	Dilation_buf_4_data_1 <= "0000000000";
	Dilation_buf_4_data_2 <= "0000000000";
	Dilation_buf_4_data_3 <= "0000000000";
	Dilation_buf_4_data_4 <= "0000000000";
	Dilation_buf_4_data_5 <= "0000000000";
	Dilation_buf_4_data_6 <= "0000000000";
	Dilation_buf_4_data_7 <= "0000000000";
	Dilation_buf_4_data_8 <= "0000000000";
	Dilation_buf_4_data_9 <= "0000000000";
	Dilation_buf_5_data_1 <= "0000000000";
	Dilation_buf_5_data_2 <= "0000000000";
	Dilation_buf_5_data_3 <= "0000000000";
	Dilation_buf_5_data_4 <= "0000000000";
	Dilation_buf_5_data_5 <= "0000000000";
	Dilation_buf_5_data_6 <= "0000000000";
	Dilation_buf_5_data_7 <= "0000000000";
	Dilation_buf_5_data_8 <= "0000000000";
	Dilation_buf_5_data_9 <= "0000000000";
	Dilation_buf_6_data_1 <= "0000000000";
	Dilation_buf_6_data_2 <= "0000000000";
	Dilation_buf_6_data_3 <= "0000000000";
	Dilation_buf_6_data_4 <= "0000000000";
	Dilation_buf_6_data_5 <= "0000000000";
	Dilation_buf_6_data_6 <= "0000000000";
	Dilation_buf_6_data_7 <= "0000000000";
	Dilation_buf_6_data_8 <= "0000000000";
	Dilation_buf_6_data_9 <= "0000000000";
	Dilation_buf_7_data_1 <= "0000000000";
	Dilation_buf_7_data_2 <= "0000000000";
	Dilation_buf_7_data_3 <= "0000000000";
	Dilation_buf_7_data_4 <= "0000000000";
	Dilation_buf_7_data_5 <= "0000000000";
	Dilation_buf_7_data_6 <= "0000000000";
	Dilation_buf_7_data_7 <= "0000000000";
	Dilation_buf_7_data_8 <= "0000000000";
	Dilation_buf_7_data_9 <= "0000000000";
	Dilation_buf_8_data_1 <= "0000000000";
	Dilation_buf_8_data_2 <= "0000000000";
	Dilation_buf_8_data_3 <= "0000000000";
	Dilation_buf_8_data_4 <= "0000000000";
	Dilation_buf_8_data_5 <= "0000000000";
	Dilation_buf_8_data_6 <= "0000000000";
	Dilation_buf_8_data_7 <= "0000000000";
	Dilation_buf_8_data_8 <= "0000000000";
	Dilation_buf_8_data_9 <= "0000000000";

				Dilation_buf_cnt <= 0;
			end if;
--		end if;
	end if;
end if;
end process;
--Dilation-Buffer------------------------------------------------------------------------------------------------

--Dilation------------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, buf_sobel_cc_en, buf_data_state, Dilation_buf_0_data_1, Dilation_buf_0_data_2, Dilation_buf_0_data_3, Dilation_buf_1_data_1, Dilation_buf_1_data_2, Dilation_buf_1_data_3, Dilation_buf_2_data_1, Dilation_buf_2_data_2, Dilation_buf_2_data_3, Dilation_CRB_data)
variable Dilation_x_cc_1 : std_logic_vector(9 downto 0);
variable Dilation_x_cc_2 : std_logic_vector(9 downto 0);
variable Dilation_y_cc_1 : std_logic_vector(9 downto 0);
variable Dilation_y_cc_2 : std_logic_vector(9 downto 0);
begin
if rst_system = '0' then
	Dilation_XSCR <= "0000000000";
	Dilation_YSCR <= "0000000000";
	Dilation_CRB_data <= '0';
--	F33_total <= "00000000000";
else
	if rising_edge(clk_video) then
			if buf_sobel_cc_en = '1' then
				if buf_data_state(0) = '1' then
					 Dilation_XSCR <= Dilation_buf_0_data_1 + Dilation_buf_0_data_2 + Dilation_buf_0_data_3 + Dilation_buf_0_data_4 + Dilation_buf_0_data_5 + Dilation_buf_0_data_6 + Dilation_buf_0_data_7 + Dilation_buf_0_data_8 + Dilation_buf_0_data_9 +
											Dilation_buf_1_data_1 + Dilation_buf_1_data_2 + Dilation_buf_1_data_3 + Dilation_buf_1_data_4 + Dilation_buf_1_data_5 + Dilation_buf_1_data_6 + Dilation_buf_1_data_7 + Dilation_buf_1_data_8 + Dilation_buf_1_data_9 +
											Dilation_buf_2_data_1 + Dilation_buf_2_data_2 + Dilation_buf_2_data_3 + Dilation_buf_2_data_4 + Dilation_buf_2_data_5 + Dilation_buf_2_data_6 + Dilation_buf_2_data_7 + Dilation_buf_2_data_8 + Dilation_buf_2_data_9 +
											Dilation_buf_3_data_1 + Dilation_buf_3_data_2 + Dilation_buf_3_data_3 + Dilation_buf_3_data_4 + Dilation_buf_3_data_5 + Dilation_buf_3_data_6 + Dilation_buf_3_data_7 + Dilation_buf_3_data_8 + Dilation_buf_3_data_9 +
											Dilation_buf_4_data_1 + Dilation_buf_4_data_2 + Dilation_buf_4_data_3 + Dilation_buf_4_data_4 + Dilation_buf_4_data_5 + Dilation_buf_4_data_6 + Dilation_buf_4_data_7 + Dilation_buf_4_data_8 + Dilation_buf_4_data_9 +
											Dilation_buf_5_data_1 + Dilation_buf_5_data_2 + Dilation_buf_5_data_3 + Dilation_buf_5_data_4 + Dilation_buf_5_data_5 + Dilation_buf_5_data_6 + Dilation_buf_5_data_7 + Dilation_buf_5_data_8 + Dilation_buf_5_data_9 +
											Dilation_buf_6_data_1 + Dilation_buf_6_data_2 + Dilation_buf_6_data_3 + Dilation_buf_6_data_4 + Dilation_buf_6_data_5 + Dilation_buf_6_data_6 + Dilation_buf_6_data_7 + Dilation_buf_6_data_8 + Dilation_buf_6_data_9 +
    										Dilation_buf_7_data_1 + Dilation_buf_7_data_2 + Dilation_buf_7_data_3 + Dilation_buf_7_data_4 + Dilation_buf_7_data_5 + Dilation_buf_7_data_6 + Dilation_buf_7_data_7 + Dilation_buf_7_data_8 + Dilation_buf_7_data_9 +
											Dilation_buf_8_data_1 + Dilation_buf_8_data_2 + Dilation_buf_8_data_3 + Dilation_buf_8_data_4 + Dilation_buf_8_data_5 + Dilation_buf_8_data_6 + Dilation_buf_8_data_7 + Dilation_buf_8_data_8 + Dilation_buf_8_data_9 ;	
				else

					if Dilation_XSCR > "0000001010"  then
						Dilation_CRB_data <= '1';	
					else
						Dilation_CRB_data <= '0';
					end if;
				end if;
			else
				Dilation_XSCR <= "0000000000";
				Dilation_YSCR <= "0000000000";
				Dilation_CRB_data <= '0';
			end if;
			
			
			
--		end if;
	end if;
end if;
end process;
--Dilation------------------------------------------------------------------------------------------------------


----CRB-------------------------------------------------------------------------------------------------------
process(rst_system, clk_video, buf_vga_en, f_video_en, cnt_video_hsync, buf_data_state, data_video, cnt_h_sync_vga, cnt_v_sync_vga, CRB_MDF_buf_data, buf_sobel_cc_en)
begin
if rst_system = '0' then
	CRB_buf_in_cnt <= 159;
	CRB_buf_out_cnt <= 0;
	CRB_Cb_en <= '0';
	CRB_Cr_en  <= '0';
else
	if rising_edge(clk_video) then
		if ((f_video_en = '0' and black_vga_en = '0') and cnt_h_sync_vga >= 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga >= 0 and cnt_v_sync_vga < 480) then
			if CRB_buf_out_cnt = CRB_buf_cnt_max then
				CRB_buf_out_cnt <= CRB_buf_cnt_max;
			else
				CRB_buf_out_cnt <= CRB_buf_out_cnt + 1;
			end if;
		

			CRB_Erosion_buf_data <= CRB_Erosion_buf(CRB_buf_out_cnt);	
			
			CRB_Dilation_buf_data <= CRB_Dilation_buf(CRB_buf_out_cnt);		

			CRB_Sobel_buf_data <= CRB_Sobel_buf(CRB_buf_out_cnt);

			CRB_diff_buf_data <= CRB_diff_buf(CRB_buf_out_cnt);
			
			
			
			CRB_SF_buf_data <= CRB_SF_buf(CRB_buf_out_cnt);
			MT_YS_data <= CRB_YYY_buf(CRB_buf_out_cnt);
		else
		
			CRB_Erosion_buf_data <= '0';
			CRB_diff_buf_data <= '0';

			CRB_MDF_buf_data <= '0';
			CRB_Sobel_buf_data <= '0';
			CRB_SF_buf_data <= '0';
			CRB_buf_out_cnt <= 0;
			MT_YS_data <= "00000000";
		end if;
		
		if SBB_buf_en = '1' then
			case buf_data_state is
				when "00" =>
								--if (data_video >= "01111101" and data_video < "10001000") then --cb 125 - 130 Eye
								if (data_video >= "01101110" and data_video < "10000010") then --cb 110 - 129 Skin
									CRB_Cb_en <= '1';
								else
									CRB_Cb_en <= '0';
								end if;
				when "10" =>
								--if (data_video >= "01111101" and data_video < "10001000") then --cb 125 - 130 Eye
								if (data_video >= "10000010" and data_video < "10010101") then --cr 130 - 149 Skin
									CRB_Cr_en <= '1';
								else
									CRB_Cr_en <= '0';
								end if;
				when others => null;
			end case;
			
			if buf_data_state(0) = '1' then
				
				if SB_CRB_data = '1' then
					CRB_Sobel_buf(CRB_buf_in_cnt) <= '1';
					
				else
					CRB_Sobel_buf(CRB_buf_in_cnt) <= '0';
					
				end if;
				
				if diff = '1' then
					CRB_diff_buf(CRB_buf_in_cnt) <= '1';
				else
					CRB_diff_buf(CRB_buf_in_cnt) <= '0';
				end if;
				
				if Erosion_CRB_data = '1' then
					CRB_Erosion_buf(CRB_buf_in_cnt) <= '1';
				else
					CRB_Erosion_buf(CRB_buf_in_cnt) <= '0';
				end if;
				
				if Dilation_CRB_data = '1' then
					CRB_Dilation_buf(CRB_buf_in_cnt) <= '1';
				else
					CRB_Dilation_buf(CRB_buf_in_cnt) <= '0';
				end if;
				
				
				if SBB_buf_out_data > SBB_data_delay_1 then
					CRB_YYY_buf(CRB_buf_in_cnt) <= SBB_buf_out_data - SBB_data_delay_1;
				else
					CRB_YYY_buf(CRB_buf_in_cnt) <= SBB_data_delay_1 - SBB_buf_out_data;
				end if;
								
				if CRB_buf_in_cnt = 0  then
					CRB_buf_in_cnt <= 0;
				else
					CRB_buf_in_cnt <= CRB_buf_in_cnt - 1;
				end if;
			end if;					
		else
			CRB_buf_in_cnt <= CRB_buf_cnt_max;
			CRB_Cb_en <= '0';
			CRB_Cr_en <= '0';
		end if;
	end if;
end if;
end process;
--CRB-------------------------------------------------------------------------------------------------------
process(clk_video, rst_system)
begin
	if rst_system = '0' then
		box_size <= 0;
	elsif rising_edge(clk_video) then
		if MPAS_SS = 0 then
			box_size <= 100;
		end if;
	end if;
end process;


process(rst_system, clk_video, f_video_en, black_vga_en, cnt_h_sync_vga, cnt_v_sync_vga)
begin
	if rst_system = '0' then
	
		MPAS_SS <= 0;
		MPAS_DD_cnt <= 0;
--		FDS_His_en <= '0';
--		MPAS_SS_2 <= 0;
--		MPAS_SS_3 <= 0;
--		MPAS_SS_4 <= 0;
--		MPAS_SS_5 <= 0;
--		MP_frame_cnt <= 0;
--		MP_frame_cnt_2 <= 0;
		
	elsif rising_edge(clk_video) then	
		

		case MPAS_SS is 
		
			when 0 =>
							MPAS_SS <= 1;
						
						
			when 1 => -- ??????????l??L??D????m?????u??y?????I????		
						if MPAS_fin_en ='1' and MPAS_C_TF ='1' then -- ?????????????¯I????A???I??x???m
							MPAS_SS <= 2; -- ?H?A?N??2
						elsif MPAS_fin_en ='1' and MPAS_C_TF ='0' then -- p????
							MPAS_SS <= 0; -- ??A???A?s?y?e?
						end if;
						
			when 2 => -- ?????reset ??A?
						if (f_video_en = '0' and black_vga_en = '0') then	
							MPAS_SS <= 3;
						end if;
	
			when 3 => -- ???I??b?@?I????o???I??m???????????????AYp????C
						if MPAS_fin_en ='1' then -- ?G???B???

								MPAS_SS <= 2;
								
						end if;
												
			when others => null;
		end case;
		--	
		
		
	end if;	
end process;

----Motion point average system by Chueh-Han Lo 20121226-------------------------------------------------------------------------------------------------------
process(rst_system, clk_video, f_video_en, black_vga_en, cnt_h_sync_vga, cnt_v_sync_vga)
begin
if rst_system = '0' then

MPAS_XC <= 0;
MPAS_YC <= 0;
MPAS_XC_SB2I <= 0;
MPAS_YC_SB2I <= 0;
MPAS_XCB <= "00000000000000000000000";
MPAS_YCB <= "0000000000000000000000";
MPAS_SB2I <= 0;
MPAS_XCC <= 0;
MPAS_YCC <= 0;
MPAS_XCCT <= 0;
MPAS_YCCT <= 0;
MPAS_XCCT2 <= 0;
MPAS_XCCT3 <= 0;
MPAS_XCCT4 <= 0;
MPAS_XCCT5 <= 0;
MPAS_XCCT6 <= 0;
MPAS_XCCT7 <= 0;

MPAS_YCCT2 <= 0;
MPAS_YCCT3 <= 0;
MPAS_YCCT4 <= 0;
MPAS_YCCT5 <= 0;
MPAS_YCCT6 <= 0;
MPAS_YCCT7 <= 0;

MPAS_XCC_is1 <= 0;
MPAS_YCC_is1 <= 0;
MPAS_fin_en <= '0';
MPAS_AS <= 0;
MPAS_C_TF <= '0';
MPAS_cnt <= 0;
MPAS_R <= 0;
MPAS_L <= 0;
MPAS_U <= 0;
MPAS_D <= 0;


MPAS_XCC_dou <= 0;
MPAS_YCC_dou <= 0;
MPAS_XCC_douB <= "0000000000000";
MPAS_YCC_douB <= "000000000000";

MPAS_XCC_D <= '0';
MPAS_YCC_D <= '0';
MPAS_cnt_TF <= '0';

MPAS_XCC_SP<= 0;
MPAS_YCC_SP<= 0;

MPAS_trace_XC <= 0;
MPAS_trace_YC <= 0;

x_axis <= '0' & "111111" &"0000";
y_axis <= '0' & "111111" &"0000";

elsif rising_edge(clk_video) then
	case MPAS_SS is
	--					
		when 0 => 
					MPAS_cnt <= 0;
					MPAS_XC <= 0;
					MPAS_YC <= 0;
					MPAS_XC_SB2I <= 0;
					MPAS_YC_SB2I <= 0;
					MPAS_XCB <= "00000000000000000000000";
					MPAS_YCB <= "0000000000000000000000";
					MPAS_SB2I <= 0;
					MPAS_XCCT <= 0;
					MPAS_YCCT <= 0;

					MPAS_XCCT2 <= 0;
					MPAS_XCCT3 <= 0;
					MPAS_XCCT4 <= 0;
					MPAS_XCCT5 <= 0;
					MPAS_XCCT6 <= 0;
					MPAS_XCCT7 <= 0;
					
					MPAS_YCCT2 <= 0;
					MPAS_YCCT3 <= 0;
					MPAS_YCCT4 <= 0;
					MPAS_YCCT5 <= 0;
					MPAS_YCCT6 <= 0;
					MPAS_YCCT7 <= 0;
					
					MPAS_XCC <= 0;
					MPAS_YCC <= 0;
					MPAS_trace_XC <= 0;
					MPAS_trace_YC <= 0;
					MPAS_fin_en <= '0';
					MPAS_C_TF <= '0';
					MPAS_AS <= 0;
					MPAS_R <= 30;
					MPAS_L <= 0;
					MPAS_U <= 0;
					MPAS_D <= 30;
					
					MPAS_XCC_dou <= 0;
					MPAS_YCC_dou <= 0;
					MPAS_XCC_douB <= "0000000000000";
					MPAS_YCC_douB <= "000000000000";
					MPAS_XCC_D <= '0';
					MPAS_YCC_D <= '0';
					MPAS_cnt_TF <= '0';
					MPAS_XCC_SP<= 0;
					MPAS_YCC_SP<= 0;
					MPAS_L_pole <= 0;
					MPAS_Ly_pole <= 0;
					MPAS_R_pole <= 0;
					MPAS_U_pole <= 0;
					MPAS_Ux_pole <= 0;
					MPAS_D_pole <= 0;
					MPAS_L_pole_temp <= 0;
					MPAS_Ly_pole_temp <= 0;
					MPAS_R_pole_temp <= 0;
					MPAS_U_pole_temp <= 0;
					MPAS_Ux_pole_temp <= 0;
					MPAS_D_pole_temp <= 0;
					
--					x_axis <= '0' & "111111" &"0000";
--					y_axis <= '0' & "111111" &"0000";
		when 1 => 
					if (f_video_en = '0' and black_vga_en = '0') then
					
						MPAS_fin_en <= '0'; 
						MPAS_C_TF <= '0'; 
						MPAS_AS <= 0;
						
						if ( cnt_h_sync_vga > 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga > 0 and cnt_v_sync_vga < 480 ) then 
					 
--							if CRB_MDF_buf_data ='1' then? 
--							if MT_YS_data >= "00110010" then	--?????e? > 50
--							if CRB_skin_buf_data ='1' and (MT_YS_data >= "00110010" or CRB_MDF_buf_data ='1') then	
							if CRB_Dilation_buf_data = '1' then	--??????? > 70
--								SBB_buf_out_data(2)
								if MPAS_cnt < 8192 then -- ?Gp??S??
									MPAS_cnt <= MPAS_cnt +1; -- ???????????????@????
									MPAS_XC <= MPAS_XC + cnt_h_sync_vga;
									MPAS_YC <= MPAS_YC + cnt_v_sync_vga; -- ?
								end if;
											
						
											
								case MPAS_cnt is -- ?????I?????H??I???????????????k?k
								
									when 32 => 
													MPAS_SB2I <= 5; -- 2????
													MPAS_XC_SB2I <= MPAS_XC; 
													MPAS_YC_SB2I <= MPAS_YC;
									when 64 =>	
													MPAS_SB2I <= 6;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 128 =>	
													MPAS_SB2I <= 7;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 256 =>	
													MPAS_SB2I <= 8;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 512 =>	
													MPAS_SB2I <= 9;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 1024 =>	
													MPAS_SB2I <= 10;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 2048 =>	
													MPAS_SB2I <= 11;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 4096 =>	
													MPAS_SB2I <= 12;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 8192 =>	
													MPAS_SB2I <= 13;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
													
									when others => null;
								end case;
								
							end if;
						end if;
						
					elsif ( f_video_en = '1' and MPAS_fin_en = '0') then
						
						case MPAS_AS is
						
							when 0 =>
										MPAS_XCB <= CONV_STD_LOGIC_VECTOR(MPAS_XC_SB2I, 23);
										MPAS_YCB <= CONV_STD_LOGIC_VECTOR(MPAS_YC_SB2I, 22);
										MPAS_AS <= 1;
										
							when 1 =>
										MPAS_XCCT <= CONV_INTEGER(MPAS_XCB(MPAS_SB2I+9 downto MPAS_SB2I));
										MPAS_YCCT <= CONV_INTEGER(MPAS_YCB(MPAS_SB2I+8 downto MPAS_SB2I));
										MPAS_AS <= 2; 
										
							when 2 =>
										MPAS_AS <= 3;
										
										if ( MPAS_cnt > 50 ) then    --movie point 
											MPAS_XCC <= MPAS_XCCT;
											MPAS_YCC <= MPAS_YCCT;
											MPAS_XCC_is1 <= MPAS_XCCT;
											MPAS_YCC_is1 <= MPAS_YCCT;
											MPAS_C_TF <= '1';
										else
											MPAS_C_TF <= '0';
										end if;
										
--										if MPAS_cnt > 100 then
--											MPAS_cnt_TF <= '1';
--										else
--											MPAS_cnt_TF <= '0';
--										end if;
										
							when 3 => -- ???????????????????w??200*200
										MPAS_AS <= 4;
										
										if MPAS_C_TF <= '1' then
										
											if MPAS_XCC > 640 - box_size then 
												MPAS_R <= 640;
												MPAS_L <= 640 - box_size - box_size;
											elsif MPAS_XCC < box_size then 
												MPAS_R <= box_size + box_size;
												MPAS_L <= 0;
											else
												MPAS_R <= MPAS_XCC+box_size;
												MPAS_L <= MPAS_XCC-box_size;
											end if;
											
											if MPAS_YCC > 480 - box_size then 
												MPAS_D <= 480;
												MPAS_U <= 480 - box_size - box_size;
											elsif MPAS_YCC < box_size then 
												MPAS_D <= box_size + box_size;
												MPAS_U <= 0;
											else
												MPAS_D <= MPAS_YCC+box_size;
												MPAS_U <= MPAS_YCC-box_size;
											end if;
										end if;
										
							when 4 => 
										MPAS_fin_en <= '1'; -- ????~
										
							when others => null;
						end case;
					end if;
		
		when 2 =>
					MPAS_cnt <= 0;
					MPAS_XC_SB2I <= 0;
					MPAS_YC_SB2I <= 0;
					MPAS_XC <= 0;
					MPAS_YC <= 0;
					MPAS_XCB <= "00000000000000000000000";
					MPAS_YCB <= "0000000000000000000000";
					MPAS_SB2I <= 0;
					MPAS_XCCT <= 0;
					MPAS_YCCT <= 0;
					MPAS_fin_en <= '0';
					MPAS_AS <= 0;
					MPAS_XCC_dou <= 0;
					MPAS_YCC_dou <= 0;
					MPAS_XCC_douB <= "0000000000000";
					MPAS_YCC_douB <= "000000000000";
					MPAS_L_pole_temp <= MPAS_XCC;
					MPAS_R_pole_temp <= MPAS_XCC;
					MPAS_U_pole_temp <= MPAS_YCC;
					MPAS_D_pole_temp <= MPAS_YCC;
--					MPAS_YCC_SP <= 0;
--					MPAS_XCC_SP <= 0;



					
		when 3 =>
					if (f_video_en = '0' and black_vga_en = '0') then -- when ??(?)
					
						MPAS_fin_en <= '0';
						MPAS_AS <= 0;
--						MD_Mouse_movx <= 0;
--						MD_Mouse_movy <= 0;
						
						if ( cnt_h_sync_vga > MPAS_L and cnt_h_sync_vga < MPAS_R and cnt_v_sync_vga > MPAS_U+20 and cnt_v_sync_vga < MPAS_D ) then
					
--							if CRB_MDF_buf_data ='1' then
--							if MT_YS_data >= "00110010" or CRB_MDF_buf_data ='1' then--50	
--							if CRB_skin_buf_data ='1' and (MT_YS_data >= "00110010" or CRB_MDF_buf_data ='1') then	
--							if MT_YS_data >= "01000110" or CRB_MDF_buf_data ='1' then	--70


--							if MT_YS_data >= "01000110" then	--??????? > 70		
							if CRB_Dilation_buf_data = '1' then	--??????? > 70							
								if MPAS_cnt < 8192 then  -- ?????
									MPAS_cnt <= MPAS_cnt +1;
									MPAS_XC <= MPAS_XC + cnt_h_sync_vga;
									MPAS_YC <= MPAS_YC + cnt_v_sync_vga;
								end if;
								
								
								
									
								case MPAS_cnt is  -- ?????1)
									when 32 =>
													MPAS_SB2I <= 5;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 64 =>	
													MPAS_SB2I <= 6;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 128 =>	
													MPAS_SB2I <= 7;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 256 =>	
													MPAS_SB2I <= 8;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 512 =>	
													MPAS_SB2I <= 9;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 1024 =>	
													MPAS_SB2I <= 10;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 2048 =>	
													MPAS_SB2I <= 11;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 4096 =>	
													MPAS_SB2I <= 12;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
									when 8192 =>	
													MPAS_SB2I <= 13;
													MPAS_XC_SB2I <= MPAS_XC;
													MPAS_YC_SB2I <= MPAS_YC;
													
									when others => null;
								end case;
								
								if MPAS_L_pole_temp > cnt_h_sync_vga then
									MPAS_L_pole_temp <= cnt_h_sync_vga;
									MPAS_Ly_pole_temp <= cnt_v_sync_vga;
								end if;
								if MPAS_R_pole_temp < cnt_h_sync_vga then
									MPAS_R_pole_temp <= cnt_h_sync_vga;
									MPAS_Ry_pole_temp <= cnt_v_sync_vga;
								end if;
								if MPAS_U_pole_temp > cnt_v_sync_vga then
									MPAS_U_pole_temp <= cnt_v_sync_vga;
									MPAS_Ux_pole_temp <= cnt_h_sync_vga;
								end if;
								if MPAS_D_pole_temp < cnt_v_sync_vga then
									MPAS_D_pole_temp <= cnt_v_sync_vga;
								end if;
									
							end if;									
						end if;
						
					elsif ( f_video_en = '1' and MPAS_fin_en = '0') then
						case MPAS_AS is
							when 0 =>
										
										MPAS_XCB <= CONV_STD_LOGIC_VECTOR(MPAS_XC_SB2I, 23);
										MPAS_YCB <= CONV_STD_LOGIC_VECTOR(MPAS_YC_SB2I, 22);
										MPAS_AS <= 1;
										
--										if MPAS_cnt > 150 then
--											MPAS_cnt_TF <= '1';
--										else
--											MPAS_cnt_TF <= '0';
--										end if;
										
							when 1 =>
										MPAS_XCCT <= CONV_INTEGER(MPAS_XCB(MPAS_SB2I+9 downto MPAS_SB2I));
										
										
										MPAS_YCCT <= CONV_INTEGER(MPAS_YCB(MPAS_SB2I+8 downto MPAS_SB2I));
										
										MPAS_AS <= 2;
																				
							when 2 =>
										MPAS_AS <= 3;
										
										if ( MPAS_cnt > 50) then 
											MPAS_XCC_dou <= MPAS_XCCT + MPAS_XCC + MPAS_XCCT2 + MPAS_XCCT3+ MPAS_XCCT4+ MPAS_XCCT5+ MPAS_XCCT6+ MPAS_XCCT7;
											MPAS_YCC_dou <= MPAS_YCCT + MPAS_YCC + MPAS_YCCT2 + MPAS_YCCT3+ MPAS_YCCT4+ MPAS_YCCT5+ MPAS_YCCT6+ MPAS_YCCT7;
											MPAS_trace_XC <= MPAS_XCCT;
											MPAS_trace_YC <= MPAS_YCCT;
											click_left <= '0';
--											MPAS_XCC_dou <= MPAS_XCCT + MPAS_XCC;
--											MPAS_YCC_dou <= MPAS_YCCT + MPAS_YCC;
											MPAS_C_TF <= '1';
--										elsif ( MPAS_cnt < 60) and ( MPAS_cnt > 20) and (MPAS_diff_U > 5 )then 	
--											MPAS_XCC_dou <= MPAS_XCC + MPAS_XCC + MPAS_XCC + MPAS_XCC;
--											MPAS_YCC_dou <= MPAS_YCC + MPAS_YCC + MPAS_YCC + MPAS_YCC;												
--											MPAS_trace_XC <= MPAS_trace_XC;
--											MPAS_trace_YC <= MPAS_trace_YC;
--											click_left <= not(click_left) ;
--											MPAS_C_TF <= '0';
										else
											if MPAS_diff_U > 5 then 
												click_left <='1' ;
											else
												click_left <='0' ;
											end if ;
											MPAS_XCC_dou <= MPAS_XCC + MPAS_XCCT + MPAS_XCCT + MPAS_XCCT + MPAS_XCCT + MPAS_XCCT + MPAS_XCCT + MPAS_XCCT;
											MPAS_YCC_dou <= MPAS_YCC + MPAS_YCCT + MPAS_YCCT + MPAS_YCCT + MPAS_YCCT + MPAS_YCCT + MPAS_YCCT + MPAS_YCCT;												
											MPAS_trace_XC <= MPAS_trace_XC;
											MPAS_trace_YC <= MPAS_trace_YC;
--											MPAS_XCC_dou <= MPAS_XCC + MPAS_XCC;
--											MPAS_YCC_dou <= MPAS_YCC + MPAS_YCC;
--											if HCS_total =0 then
												MPAS_C_TF <= '0';
--											end if;
										end if;
								
										
							when 3 =>
										MPAS_AS <= 4;
										
										MPAS_XCC_douB <= CONV_STD_LOGIC_VECTOR(MPAS_XCC_dou, 13);
										MPAS_YCC_douB <= CONV_STD_LOGIC_VECTOR(MPAS_YCC_dou, 12);
										
										MPAS_XCCT <= 0;
										MPAS_YCCT <= 0;
										
							when 4 =>
										MPAS_AS <= 5;	
										MPAS_XCCT <= CONV_INTEGER(MPAS_XCC_douB(12 downto 3));
										MPAS_YCCT <= CONV_INTEGER(MPAS_YCC_douB(11 downto 3));
--										MPAS_XCCT <= CONV_INTEGER(MPAS_XCC_douB(10 downto 1));
--										MPAS_YCCT <= CONV_INTEGER(MPAS_YCC_douB(9 downto 1));
										
							when 5 => -- ??????????I???
										MPAS_AS <= 6;	
--										if MPAS_C_TF ='1' then
											MPAS_XCC_is1 <= MPAS_XCC;
											MPAS_YCC_is1 <= MPAS_YCC;
--										end if;
--											
							when 6 => -- ????????I
										MPAS_AS <= 7;	
										if MPAS_C_TF ='1' then
--	
											
											MPAS_XCC <= MPAS_XCCT;
											MPAS_XCCT2 <= MPAS_XCCT;
											MPAS_XCCT3 <= MPAS_XCCT2;
											MPAS_XCCT4 <= MPAS_XCCT3;
											MPAS_XCCT5 <= MPAS_XCCT4;
											MPAS_XCCT6 <= MPAS_XCCT5;
											MPAS_XCCT7 <= MPAS_XCCT6;
											
											
											
											
											MPAS_YCC <= MPAS_YCCT;
											MPAS_YCCT2 <= MPAS_YCCT;
											MPAS_YCCT3 <= MPAS_YCCT2;
											MPAS_YCCT4 <= MPAS_YCCT3;
											MPAS_YCCT5 <= MPAS_YCCT4;
											MPAS_YCCT6 <= MPAS_YCCT5;
											MPAS_YCCT7 <= MPAS_YCCT6;
											
											
											MPAS_L_pole <= MPAS_L_pole_temp;
											MPAS_Ly_pole <= MPAS_Ly_pole_temp;
											
											MPAS_R_pole <= MPAS_R_pole_temp;
											MPAS_Ry_pole <= MPAS_Ry_pole_temp;
											
											MPAS_U_pole <= MPAS_U_pole_temp;
											MPAS_Ux_pole <= MPAS_Ux_pole_temp;
											
											MPAS_D_pole <= MPAS_D_pole_temp;
											
											MPAS_L_pole_old <= MPAS_L_pole ;
											MPAS_Ly_pole_old <= MPAS_Ly_pole;
											
											MPAS_R_pole_old <= MPAS_R_pole ;
											MPAS_Ry_pole_old <= MPAS_Ry_pole;
											
											MPAS_U_pole_old <= MPAS_U_pole;
											MPAS_Ux_pole_old <= MPAS_Ux_pole;
											
											MPAS_diff_Lx <= MPAS_Ux_pole -MPAS_L_pole ;       --  U  and L
											MPAS_diff_Lx_old <= MPAS_Ux_pole_old -MPAS_L_pole_old ;
											MPAS_diff_Ly <= MPAS_U_pole -MPAS_Ly_pole ;       
											MPAS_diff_Ly_old <= MPAS_U_pole_old -MPAS_Ly_pole_old ;
											
											
											
											
											MPAS_diff_Rx <=  MPAS_R_pole - MPAS_Ux_pole ;	--  U  and R
											MPAS_diff_Rx_old <= MPAS_R_pole_old -MPAS_Ux_pole_old;
											MPAS_diff_Ry <=  MPAS_U_pole - MPAS_Ry_pole ;	
											MPAS_diff_Ry_old <= MPAS_U_pole_old -MPAS_Ry_pole_old;
											
											if MPAS_U_pole > MPAS_U_pole_old then 
											MPAS_diff_U <= MPAS_U_pole -MPAS_U_pole_old ;
											else
											MPAS_diff_U <= MPAS_U_pole_old -MPAS_U_pole ;
											end if ;
											
										end if;
									
							when 7 =>
										MPAS_AS <= 8;
										
										
										if MPAS_trace_XC > 640 - box_size then 
											MPAS_R <= 640;
											MPAS_L <= 640 - box_size - box_size;
										elsif MPAS_trace_XC < box_size then 
											MPAS_R <= box_size + box_size;
											MPAS_L <= 0;
										else
											MPAS_R <= MPAS_trace_XC+box_size;
											MPAS_L <= MPAS_trace_XC-box_size;
										end if;
										
										if MPAS_trace_YC > 480 - box_size then 
											MPAS_D <= 480;
											MPAS_U <= 480 - box_size - box_size;
										elsif MPAS_trace_YC < box_size then 
											MPAS_D <= box_size + box_size;
											MPAS_U <= 0;
										else
											MPAS_D <= MPAS_trace_YC+box_size;
											MPAS_U <= MPAS_trace_YC-box_size;
										end if;
				
--										MPAS_U_pole_old <= MPAS_U_pole;
--										MPAS_Ux_pole_old <= MPAS_Ux_pole;

--										-- ???????
--										if ( MPAS_Ux_pole > MPAS_Ux_pole_old ) and ( MPAS_Ux_pole>0 ) then--right -- ????????????I???????k??
--											MPAS_XCC_SP <= MPAS_Ux_pole - MPAS_Ux_pole_old;
--											MPAS_XCC_D <= '1'; -- ?????(?k)
--										elsif( MPAS_Ux_pole < MPAS_Ux_pole_old ) and ( MPAS_Ux_pole_old>0 ) then--left -- V?????
--											MPAS_XCC_SP <= MPAS_Ux_pole_old - MPAS_Ux_pole;
--											MPAS_XCC_D <= '0';
--										else
----											MPAS_XCC_D <= 0; -- ?????????m??(??)A??S??
--											MPAS_XCC_SP <= 0;
--										end if;
--										
--										if ( MPAS_U_pole > MPAS_U_pole_old ) and ( MPAS_U_pole>0 ) then--down
--											MPAS_YCC_SP <= MPAS_U_pole - MPAS_U_pole_old;
--											MPAS_YCC_D <= '1';
--										elsif ( MPAS_U_pole < MPAS_U_pole_old ) and ( MPAS_U_pole_old>0 ) then--up
--											MPAS_YCC_SP <= MPAS_U_pole_old - MPAS_U_pole;
--											MPAS_YCC_D <= '0';
--										else
----											MPAS_YCC_D <= 0;
--											MPAS_YCC_SP <= 0;
--										end if;
										-- ???????
										if ( MPAS_XCC > MPAS_XCC_is1 ) and ( MPAS_XCC>0 ) then--right -- ????????????I???????k??
											MPAS_XCC_SP <= MPAS_XCC - MPAS_XCC_is1;
											MPAS_XCC_D <= '1'; -- ?????(?k)
										elsif( MPAS_XCC < MPAS_XCC_is1 ) and ( MPAS_XCC_is1>0 ) then--left -- V?????
											MPAS_XCC_SP <= MPAS_XCC_is1 - MPAS_XCC;
											MPAS_XCC_D <= '0';
										else
--											MPAS_XCC_D <= 0; -- ?????????m??(??)A??S??
											MPAS_XCC_SP <= 0;
										end if;
										
										if ( MPAS_YCC > MPAS_YCC_is1 ) and ( MPAS_YCC>0 ) then--down
											MPAS_YCC_SP <= MPAS_YCC - MPAS_YCC_is1;
											MPAS_YCC_D <= '1';
										elsif ( MPAS_YCC < MPAS_YCC_is1 ) and ( MPAS_YCC_is1>0 ) then--up
											MPAS_YCC_SP <= MPAS_YCC_is1 - MPAS_YCC;
											MPAS_YCC_D <= '0';
										else
--											MPAS_YCC_D <= 0;
											MPAS_YCC_SP <= 0;
										end if;
--										MPAS_XCC_mouse <= MPAS_XCC_D & CONV_STD_LOGIC_VECTOR(MPAS_XCC_SP, 8) &"00";
--										MPAS_YCC_mouse <= MPAS_YCC_D & CONV_STD_LOGIC_VECTOR(MPAS_YCC_SP, 8) &"00";
--										x_axis <= MPAS_XCC_D & CONV_STD_LOGIC_VECTOR(MPAS_XCC_SP, 6) &"0000";
--										y_axis <= MPAS_YCC_D & CONV_STD_LOGIC_VECTOR(MPAS_YCC_SP, 6) &"0000";
										
--										x_axis <= '0' & MPAS_XCC_douB(11 downto 2) ;
--										y_axis <= "00" & MPAS_YCC_douB(10 downto 2) ; 
										
										
--										click_left <= '0' ;
--										click_right <='0' ;

--											MPAS_diff_Lx <= MPAS_Ux_pole -MPAS_L_pole ;       --  U  and L
--											MPAS_diff_Lx_old <= MPAS_Ux_pole_old -MPAS_L_pole_old ;
--											
--											MPAS_diff_Rx <=  MPAS_R_pole - MPAS_Ux_pole ;	--  U  and R
--											MPAS_diff_Rx_old <= MPAS_R_pole_old -MPAS_Ux_pole_old;
											
--											if  MPAS_diff_Lx < 30 and MPAS_diff_Ly < 30 then 
--												click_left <= '1' ;
--											elsif MPAS_diff_Lx >= 30 and MPAS_diff_Ly >= 30 then 
--												click_left <= '0' ;
--											end if ;
--											
--											if  MPAS_diff_Rx < 30 and MPAS_diff_Ry < 30 then 
--												click_right <= '1' ;
--											elsif MPAS_diff_Rx >= 30 and MPAS_diff_Ry >= 30 then 
--												click_right <= '0' ;
--											end if ;

--
--											if  MPAS_diff_Lx > 30  then 
--												click_left <= '0' ;
--											elsif MPAS_diff_Lx <= 30  then 
--												click_left <= '1' ;
--											end if ;
											
--											case MPAS_XCC is
--												when 0 to 175 =>
--															case MPAS_YCC is
--																when 0 to 125 =>
--																		x_axis <= '0' & "001111" &"0000";
--																		y_axis <= '0' & "001111" &"0000";
--																when 126 to 354 =>
--																		x_axis <= '0' & "001111" &"0000";
--																		y_axis <= '0' & "000000" &"0000";
--																when 355 to 480 =>
--																		x_axis <= '0' & "001111" &"0000";
--																		y_axis <= '1' & "001111" &"0000";
--																when others => null;
--															end case ; 
--											
--												when 176 to 464 =>
--															case MPAS_YCC is
--																when 0 to 125 =>
--																		x_axis <= '0' & "000000" &"0000";
--																		y_axis <= '0' & "001111" &"0000";
--																when 126 to 354 =>
--																		x_axis <= MPAS_XCC_D & CONV_STD_LOGIC_VECTOR(MPAS_XCC_SP, 6) &"0000";
--																		y_axis <= MPAS_YCC_D & CONV_STD_LOGIC_VECTOR(MPAS_YCC_SP, 6) &"0000";
--																when 355 to 480 =>
--																		x_axis <= '0' & "000000" &"0000";
--																		y_axis <= '1' & "001111" &"0000";
--																when others => null;
--															end case ;	
--												when 465 to 640 =>
--															case MPAS_YCC is
--																when 0 to 125 =>
--																		x_axis <= '1' & "001111" &"0000";
--																		y_axis <= '0' & "001111" &"0000";
--																when 126 to 354 =>
--																		x_axis <= '1' & "001111" &"0000";
--																		y_axis <= '0' & "000000" &"0000";
--																when 355 to 480 =>
--																		x_axis <= '1' & "001111" &"0000";
--																		y_axis <= '1' & "001111" &"0000";
--																when others => null;
--															end case ;
--												when others => null;
--											end case ;
														
--											MPAS_XCC
--				 							MPAS_YCC
--MPAS_YCC
													x_axis <= "0" & CONV_STD_LOGIC_VECTOR(MPAS_XCC, 10);
													y_axis <= "0" & CONV_STD_LOGIC_VECTOR(MPAS_YCC, 10) ;
--												
--													x_axis <= '0' & MPAS_XCC_douB(12 downto 3);
--													y_axis <= "00" & MPAS_YCC_douB(11 downto 3);
--													x_axis <= '1' & "001111" &"0000";
--													y_axis <= '1' & "001111" &"0000";
								
					
							when 8 => 
										MPAS_fin_en <= '1'; -- ???~
										
							when others => null;
						end case;
					end if;
					
		when others => null;
	end case;
end if;	
end process;
----Motion point average system by Chueh-Han Lo 20121226-------------------------------------------------------------------------------------------------------



----
--VGA-RGB-9bit----------------------------------------------------------------------------------------------------
process(rst_system, clk_video, f_video_en, black_vga_en, cnt_h_sync_vga, cnt_h_sync_vga, CRB_MDF_buf_data )
begin
if rst_system = '0' then
	r_vga <= "000";
	g_vga <= "000";
	b_vga <= "000";
	buf_vga_Y_out_cnt <= 0;
elsif rising_edge(clk_video) then
		if (((f_video_en = '0' and black_vga_en = '0') or (f_video_en = '1' and black_vga_en = '1')) and cnt_h_sync_vga > 1 and cnt_h_sync_vga < 640 and cnt_v_sync_vga > 1 and cnt_v_sync_vga < 480)   then
--		if (((f_video_en = '0' and black_vga_en = '0') or (f_video_en = '1' and black_vga_en = '1')) and cnt_h_sync_vga < 640 and cnt_v_sync_vga > 1 and cnt_v_sync_vga < 480) then
			buf_vga_Y_out_cnt <= buf_vga_Y_out_cnt - 1;
--
			
			if   cnt_h_sync_vga > 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga > 0 and cnt_v_sync_vga < 480   then
						
                            --r_vga <= buf_vga_sobel(7 downto 5)(cnt_h_sync_vga);
                            --g_vga <= buf_vga_sobel(7 downto 5)(cnt_h_sync_vga);
                            --b_vga <= buf_vga_sobel(7 downto 5)(cnt_h_sync_vga);
                        --if  	CRB_Dilation_buf_data = '1' then 
								--r_vga <= "111";
								--g_vga <= "111";
								--b_vga <= "111";
----						elsif  	CRB_Erosion_buf_data = '1' then 
----								r_vga <= "00000000";
----								g_vga <= "11100000";
----								b_vga <= "00000000";
----						elsif  	CRB_diff_buf_data = '1' then 
----								r_vga <= "00000000";
----								g_vga <= "00000000";
----								b_vga <= "11100000";
						--elsif	(cnt_h_sync_vga > MPAS_L and cnt_h_sync_vga < MPAS_R and cnt_v_sync_vga = MPAS_U+20) or
					--(cnt_h_sync_vga > MPAS_L and cnt_h_sync_vga < MPAS_R and cnt_v_sync_vga = MPAS_D) or
					--(cnt_v_sync_vga > MPAS_U+20 and cnt_v_sync_vga < MPAS_D and cnt_h_sync_vga = MPAS_L) or
					--(cnt_v_sync_vga > MPAS_U+20 and cnt_v_sync_vga < MPAS_D and cnt_h_sync_vga = MPAS_R) then
								--r_vga <= "111";
								--g_vga <= "000";
								--b_vga <= "000";
						--elsif  (cnt_h_sync_vga > 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga = 125 )then 
								--r_vga <= "000";
								--g_vga <= "000";
								--b_vga <= "111";
						--elsif  (cnt_h_sync_vga > 0 and cnt_h_sync_vga < 640 and cnt_v_sync_vga = 355 )then 
								--r_vga <= "000";
								--g_vga <= "000";
								--b_vga <= "111";
						--elsif  (cnt_v_sync_vga > 0 and cnt_v_sync_vga < 480 and cnt_h_sync_vga = 175 )then 
								--r_vga <= "000";
								--g_vga <= "000";
								--b_vga <= "111";
						--elsif  (cnt_v_sync_vga > 0 and cnt_v_sync_vga < 480 and cnt_h_sync_vga = 465 )then 
								--r_vga <= "000";
								--g_vga <= "000";
								--b_vga <= "111";
----MPAS_XCC_SP
						--elsif  (cnt_h_sync_vga > 0 and cnt_h_sync_vga < MPAS_XCC and cnt_v_sync_vga > 0 and cnt_v_sync_vga < 25  )then 
								--r_vga <= "111";
								--g_vga <= "000";
								--b_vga <= "000";
--
								--
						--elsif  (cnt_h_sync_vga > 0 and cnt_h_sync_vga < 25 and cnt_v_sync_vga > 0 and cnt_v_sync_vga < MPAS_YCC )then 
								--r_vga <= "111";
								--g_vga <= "000";
								--b_vga <= "000";
							--
						--elsif  (cnt_h_sync_vga > MPAS_XCC - 5 and cnt_h_sync_vga < MPAS_XCC + 5 and cnt_v_sync_vga > MPAS_YCC -5 and cnt_v_sync_vga < MPAS_YCC + 5  )then 
----						elsif  (cnt_h_sync_vga > MPAS_Ux_pole - 5 and cnt_h_sync_vga < MPAS_Ux_pole + 5 and cnt_v_sync_vga > MPAS_U_pole -5 and cnt_v_sync_vga < MPAS_U_pole + 5  )then 
								--if click_left = '1' then
								--r_vga <= "111";
								--g_vga <= "000";
								--b_vga <= "000";
								--
								--elsif click_right = '1' then
								--r_vga <= "000";
								--g_vga <= "111";
								--b_vga <= "000";
								--else
								--r_vga <= "000";
								--g_vga <= "000";
								--b_vga <= "111";
								--end if ;
								--
						--elsif	(cnt_h_sync_vga > MPAS_L_pole and cnt_h_sync_vga < MPAS_R_pole and cnt_v_sync_vga = MPAS_U_pole) or
					--(cnt_h_sync_vga > MPAS_L_pole and cnt_h_sync_vga < MPAS_R_pole and cnt_v_sync_vga = MPAS_D_pole) or
					--(cnt_v_sync_vga > MPAS_U_pole and cnt_v_sync_vga < MPAS_D_pole and cnt_h_sync_vga = MPAS_L_pole) or
					--(cnt_v_sync_vga > MPAS_U_pole and cnt_v_sync_vga < MPAS_D_pole and cnt_h_sync_vga = MPAS_R_pole) then
								--r_vga <= "000";
								--g_vga <= "111";
								--b_vga <= "111";
--
						--else
								--r_vga <= "000";
								--g_vga <= "000";
								--b_vga <= "000";
						--end if ;


				--	buf_vga_sobel
			--r_vga <= buf_vga_sobel(cnt_h_sync_vga);
			--g_vga <= buf_vga_sobel(cnt_h_sync_vga);
			--b_vga <= buf_vga_sobel(cnt_h_sync_vga);
			else 
--				
----			end if ;
--		
----				if  	SB_xy_en = '1' then 
--
--
			end if ;

                --r_vga<=SBB_buf_out_data(7 downto 5);
                --g_vga<=SBB_buf_out_data(7 downto 5);
                --b_vga<=SBB_buf_out_data(7 downto 5);
                
                --r_vga<=SBB_data_delay_1(7 downto 5);
                --g_vga<=SBB_data_delay_1(7 downto 5);
                --b_vga<=SBB_data_delay_1(7 downto 5);
                if diff <= '1' then 

                    r_vga <= "111";
                    g_vga <= "111";
                    b_vga <= "000";
                else
                    r_vga <= buf_vga_Y(cnt_h_sync_vga)(7 downto 5);
                    g_vga <= buf_vga_Y(cnt_h_sync_vga)(7 downto 5);
                    b_vga <= buf_vga_Y(cnt_h_sync_vga)(7 downto 5);
                end if ;
		else
			r_vga <= "000";
			g_vga <= "000";
			b_vga <= "000";
			buf_vga_Y_out_cnt <= 639;
		end if;
--	
end if;
end process;
--VGA-RGB-9bit---------------------------------------------------------------------------------------------------





   
end architecture_lll;
